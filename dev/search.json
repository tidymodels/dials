[{"path":[]},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dials.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla‚Äôs code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dials.tidymodels.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidymodels","title":"Contributing to tidymodels","text":"detailed information contributing tidymodels packages, see development contributing guide.","code":""},{"path":"https://dials.tidymodels.org/dev/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing to tidymodels","text":"Typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES ‚úÖ: edit roxygen comment .R file R/ directory. üö´: edit .Rd file man/ directory. use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://dials.tidymodels.org/dev/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contributing to tidymodels","text":"submit üéØ pull request tidymodels package, always file issue confirm tidymodels team agrees idea happy basic proposal. tidymodels packages work together. package contains unit tests, integration tests tests using packages contained extratests. pull requests, recommend create fork repo usethis::create_from_github(), initiate new branch usethis::pr_init(). Look build status making changes. README contains badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don‚Äôt restyle code nothing PR. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). use testthat. Contributions test cases included easier accept. contribution spans use one package, consider building extratests changes check breakages /adding new tests . Let us know PR ran extra tests. dials package, test objects take long build every commit. Regenerate test objects using script data-raw/ follows: terminal, run: , move .Rout file data-raw/. Check files committing .","code":"R CMD BATCH --vanilla data-raw/test_objects.R"},{"path":"https://dials.tidymodels.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"Code","what":"Code of Conduct","title":"Contributing to tidymodels","text":"project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dials.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 dials authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"tuning-parameters","dir":"Articles","previous_headings":"","what":"Tuning Parameters","title":"Working with Tuning Parameters","text":"statistical machine learning models contain tuning parameters (also known hyperparameters), parameters directly estimated model. example number neighbors K-nearest neighbors model. determine reasonable values elements, indirect method used resampling profile likelihood. Search methods, genetic algorithms Bayesian search can also used determine good values. case, information needed create grid validate whether candidate value appropriate (e.g.¬†number neighbors positive integer). dials designed : Create easy use framework describing querying tuning parameters. can include getting sequences random tuning values, validating current values, transforming parameters, tasks. Standardize names different parameters. Different packages R use different argument names quantities. dials proposes standardized names user doesn‚Äôt need memorize syntactical minutiae every package. Work tidymodels packages modeling machine learning using tidyverse principles.","code":""},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"parameter-objects","dir":"Articles","previous_headings":"","what":"Parameter Objects","title":"Working with Tuning Parameters","text":"Parameter objects contain information possible values, ranges, types, aspects. two classes: general param class specific subclass related type variable. Double integer valued data subclass quant_param character logicals qual_param. common elements : Labels strings describe parameter (e.g.¬†‚ÄúNumber Components‚Äù). Defaults optional single values can set one non-random value requested. Otherwise, information contained parameter objects different different data types.","code":""},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"numeric-parameters","dir":"Articles","previous_headings":"Parameter Objects","what":"Numeric Parameters","title":"Working with Tuning Parameters","text":"example numeric tuning parameter cost-complexity parameter CART trees, otherwise known CpC_p. parameter object CpC_p can created dials using: Note parameter handled log units default range values 10^-10 0.1. range possible values can returned changed based utility functions. ‚Äôll use pipe operator : Values parameter can obtained different ways. get sequence values span range: Random values can sampled . random uniform distribution used (range values). Since parameter transformation associated , values simulated transformed scale returned natural units (although original argument can used ): CART trees, discrete set values exist given data set. may good idea assign possible values object. can get fitting initial rpart model adding values object. mtcars, three values: error occurs values transformed scale: Now, sequence random sample requested, uses set values: transformations scales package can used numeric parameters, custom transformation generated scales::trans_new(). Note transformation used, range argument specifies parameter range transformed scale. version cost(), parameter values sampled 1 10 transformed back original scale inverse -log2(). original scale, sampled values -log2(10) -log2(1).","code":"library(dials) cost_complexity() #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1] library(dplyr) cost_complexity() %>% range_get() #> $lower #> [1] 1e-10 #>  #> $upper #> [1] 0.1 cost_complexity() %>% range_set(c(-5, 1)) #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-5, 1]  # Or using the `range` argument # during creation cost_complexity(range = c(-5, 1)) #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-5, 1] # Natural units: cost_complexity() %>% value_seq(n = 4) #> [1] 1e-10 1e-07 1e-04 1e-01  # Stay in the transformed space: cost_complexity() %>% value_seq(n = 4, original = FALSE) #> [1] -10  -7  -4  -1 set.seed(5473) cost_complexity() %>% value_sample(n = 4) #> [1] 6.91e-09 8.46e-04 3.45e-06 5.90e-10 library(rpart) cart_mod <- rpart(mpg ~ ., data = mtcars, control = rpart.control(cp = 0.000001)) cart_mod$cptable #>         CP nsplit rel error xerror  xstd #> 1 0.643125      0     1.000  1.064 0.258 #> 2 0.097484      1     0.357  0.687 0.180 #> 3 0.000001      2     0.259  0.576 0.126 cp_vals <- cart_mod$cptable[, \"CP\"]  # We should only keep values associated with at least one split: cp_vals <- cp_vals[ cart_mod$cptable[, \"nsplit\"] > 0 ]  # Here the specific Cp values, on their natural scale, are added: mtcars_cp <- cost_complexity() %>% value_set(cp_vals) #> Error in `value_set()`: #> ! Some values are not valid: 0.0974840733898344 and 1e-06. mtcars_cp <- cost_complexity() %>% value_set(log10(cp_vals)) mtcars_cp #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1] #> Values: 2 mtcars_cp %>% value_seq(2) #> [1] 0.097484 0.000001 # Sampling specific values is done with replacement mtcars_cp %>%    value_sample(20) %>%    table() #> . #>              1e-06 0.0974840733898344  #>                  9                 11 trans_raise <- scales::trans_new(   \"raise\",    transform = function(x) 2^x ,    inverse = function(x) -log2(x) ) custom_cost <- cost(range = c(1, 10), trans = trans_raise) custom_cost #> Cost (quantitative) #> Transformer: raise [-Inf, Inf] #> Range (transformed scale): [1, 10] -log2(c(10, 1)) #> [1] -3.32  0.00 value_sample(custom_cost, 100) %>% range() #> [1] -3.3172 -0.0314"},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"discrete-parameters","dir":"Articles","previous_headings":"Parameter Objects","what":"Discrete Parameters","title":"Working with Tuning Parameters","text":"discrete case notion range. parameter objects defined discrete values. example, consider parameter types kernel functions used distance functions: helper functions analogues quantitative parameters:","code":"weight_func() #> Distance Weighting Function  (qualitative) #> 'rectangular', 'triangular', 'epanechnikov', 'biweight', 'triweight', '... # redefine values weight_func() %>% value_set(c(\"rectangular\", \"triangular\")) #> Distance Weighting Function  (qualitative) #> 'rectangular' and 'triangular' weight_func() %>% value_sample(3) #> [1] \"triangular\" \"inv\"        \"triweight\"  # the sequence is returned in the order of the levels weight_func() %>% value_seq(3) #> [1] \"rectangular\"  \"triangular\"   \"epanechnikov\""},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"creating-novel-parameters","dir":"Articles","previous_headings":"","what":"Creating Novel Parameters","title":"Working with Tuning Parameters","text":"package contains two constructors can used create new quantitative qualitative parameters, new_quant_param() new_qual_param(). create tuning parameter function article walks detailed example.","code":""},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"unknown-values","dir":"Articles","previous_headings":"","what":"Unknown Values","title":"Working with Tuning Parameters","text":"cases range parameter values data dependent. example, upper bound number neighbors known number data points training set known. reason, parameters unknown placeholder: values must initialized prior generating parameter values. finalize() methods can used help remove unknowns:","code":"mtry() #> # Randomly Selected Predictors (quantitative) #> Range: [1, ?] sample_size() #> # Observations Sampled (quantitative) #> Range: [?, ?] num_terms() #> # Model Terms (quantitative) #> Range: [1, ?] num_comp() #> # Components (quantitative) #> Range: [1, ?] # and so on finalize(mtry(), x = mtcars[, -1]) #> # Randomly Selected Predictors (quantitative) #> Range: [1, 10]"},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"parameter-sets","dir":"Articles","previous_headings":"","what":"Parameter Sets","title":"Working with Tuning Parameters","text":"collection parameters used model, recipe, object. can also created manually can alternate identification fields: objects can helpful creating tuning grids.","code":"glmnet_set <- parameters(list(lambda = penalty(), alpha = mixture())) glmnet_set #> Collection of 2 parameters for tuning #>  #>  identifier    type    object #>      lambda penalty nparam[+] #>       alpha mixture nparam[+]  # can be updated too update(glmnet_set, alpha = mixture(c(.3, .6))) #> Collection of 2 parameters for tuning #>  #>  identifier    type    object #>      lambda penalty nparam[+] #>       alpha mixture nparam[+]"},{"path":"https://dials.tidymodels.org/dev/articles/dials.html","id":"parameter-grids","dir":"Articles","previous_headings":"","what":"Parameter Grids","title":"Working with Tuning Parameters","text":"Sets combinations parameters can created use grid search. grid_regular(), grid_random(), grid_max_entropy(), grid_latin_hypercube() take number param objects parameter set. example, glmnet model, regular grid might : , similarly, random grid created using","code":"grid_regular(   mixture(),   penalty(),   levels = 3 # or c(3, 4), etc ) #> # A tibble: 9 √ó 2 #>   mixture      penalty #>     <dbl>        <dbl> #> 1     0   0.0000000001 #> 2     0.5 0.0000000001 #> 3     1   0.0000000001 #> 4     0   0.00001      #> 5     0.5 0.00001      #> 6     1   0.00001      #> 7     0   1            #> 8     0.5 1            #> 9     1   1 set.seed(1041) grid_random(   mixture(),   penalty(),   size = 6  ) #> # A tibble: 6 √ó 2 #>   mixture     penalty #>     <dbl>       <dbl> #> 1   0.200 0.0176      #> 2   0.750 0.000388    #> 3   0.191 0.000000159 #> 4   0.929 0.00000176  #> 5   0.143 0.0442      #> 6   0.973 0.0110"},{"path":"https://dials.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author. Hannah Frick. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://dials.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M, Frick H (2024). dials: Tools Creating Tuning Parameter Values. R package version 1.3.0.9000, https://github.com/tidymodels/dials, https://dials.tidymodels.org.","code":"@Manual{,   title = {dials: Tools for Creating Tuning Parameter Values},   author = {Max Kuhn and Hannah Frick},   year = {2024},   note = {R package version 1.3.0.9000, https://github.com/tidymodels/dials},   url = {https://dials.tidymodels.org}, }"},{"path":[]},{"path":"https://dials.tidymodels.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Creating Tuning Parameter Values","text":"package contains infrastructure create manage values tuning parameters tidymodels packages. looking tune parameters tidymodels, please look tune package tidymodels.org. name reflects idea tuning predictive models can like turning set dials complex machine duress.","code":""},{"path":"https://dials.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Creating Tuning Parameter Values","text":"can install released version dials CRAN : can install development version Github :","code":"install.packages(\"dials\") # install.packages(\"pak\") pak::pak(\"tidymodels/dials\")"},{"path":"https://dials.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tools for Creating Tuning Parameter Values","text":"Please note dials project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace correction parameter ‚Äî Laplace","title":"Laplace correction parameter ‚Äî Laplace","text":"Laplace correction smoothing low-frequency counts.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace correction parameter ‚Äî Laplace","text":"","code":"Laplace(range = c(0, 3), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace correction parameter ‚Äî Laplace","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace correction parameter ‚Äî Laplace","text":"function classes \"quant_param\" \"param\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplace correction parameter ‚Äî Laplace","text":"parameter often used correct zero-count data tables proportions.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/Laplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplace correction parameter ‚Äî Laplace","text":"","code":"Laplace() #> Laplace Correction (quantitative) #> Range: [0, 3]"},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":null,"dir":"Reference","previous_headings":"","what":"Activation functions between network layers ‚Äî activation","title":"Activation functions between network layers ‚Äî activation","text":"Activation functions network layers","code":""},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activation functions between network layers ‚Äî activation","text":"","code":"activation(values = values_activation)  activation_2(values = values_activation)  values_activation"},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Activation functions between network layers ‚Äî activation","text":"object class character length 5.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activation functions between network layers ‚Äî activation","text":"values character string possible values. See values_activation examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Activation functions between network layers ‚Äî activation","text":"parameter used parsnip models neural networks parsnip:::mlp().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/activation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activation functions between network layers ‚Äî activation","text":"","code":"values_activation #> [1] \"linear\"  \"softmax\" \"relu\"    \"elu\"     \"tanh\"    activation() #> Activation Function  (qualitative) #> 5 possible values include: #> 'linear', 'softmax', 'relu', 'elu' and 'tanh'"},{"path":"https://dials.tidymodels.org/dev/reference/adjust_deg_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","title":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","text":"parameter can used moderate smoothness spline terms used generalized additive models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/adjust_deg_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","text":"","code":"adjust_deg_free(range = c(0.25, 4), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/adjust_deg_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/adjust_deg_free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","text":"Used parsnip::gen_additive_mod().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/adjust_deg_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters to adjust effective degrees of freedom ‚Äî adjust_deg_free","text":"","code":"adjust_deg_free() #> Smoothness Adjustment (quantitative) #> Range: [0.25, 4]"},{"path":"https://dials.tidymodels.org/dev/reference/all_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter to determine which neighbors to use ‚Äî all_neighbors","title":"Parameter to determine which neighbors to use ‚Äî all_neighbors","text":"Used themis::step_bsmote().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/all_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter to determine which neighbors to use ‚Äî all_neighbors","text":"","code":"all_neighbors(values = c(TRUE, FALSE))"},{"path":"https://dials.tidymodels.org/dev/reference/all_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter to determine which neighbors to use ‚Äî all_neighbors","text":"values vector possible values (TRUE FALSE).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/all_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter to determine which neighbors to use ‚Äî all_neighbors","text":"","code":"all_neighbors() #> All Neighbors  (qualitative) #> 2 possible values include: #> TRUE and FALSE"},{"path":"https://dials.tidymodels.org/dev/reference/bart-param.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree (BART) models. ‚Äî bart-param","title":"Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree (BART) models. ‚Äî bart-param","text":"Parameters BART models parameters used constructing Bayesian adaptive regression tree (BART) models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/bart-param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree (BART) models. ‚Äî bart-param","text":"","code":"prior_terminal_node_coef(range = c(0, 1), trans = NULL)  prior_terminal_node_expo(range = c(1, 3), trans = NULL)  prior_outcome_range(range = c(0, 5), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/bart-param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree (BART) models. ‚Äî bart-param","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/bart-param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree (BART) models. ‚Äî bart-param","text":"parameters often used Bayesian adaptive regression trees (BART) via parsnip::bart().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/c5_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","title":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","text":"parameters auxiliary tree-based models use \"C5.0\" engine. correspond tuning parameters specified using set_engine(\"C5.0\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/c5_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","text":"","code":"confidence_factor(range = c(-1, 0), trans = transform_log10())  no_global_pruning(values = c(TRUE, FALSE))  predictor_winnowing(values = c(TRUE, FALSE))  fuzzy_thresholding(values = c(TRUE, FALSE))  rule_bands(range = c(2L, 500L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/c5_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values no_global_pruning(), predictor_winnowing(), fuzzy_thresholding() either TRUE FALSE.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/c5_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","text":"use , check ?C50::C5.0Control see used.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/c5_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for C5.0 ‚Äî confidence_factor","text":"","code":"confidence_factor() #> Confidence Factor for Splitting (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-1, 0] no_global_pruning() #> Skip Global Pruning?  (qualitative) #> 2 possible values include: #> TRUE and FALSE  predictor_winnowing() #> Use Initial Feature Selection?  (qualitative) #> 2 possible values include: #> TRUE and FALSE  fuzzy_thresholding() #> Use Fuzzy Thresholding?  (qualitative) #> 2 possible values include: #> TRUE and FALSE  rule_bands() #> Number of Rule Bands (quantitative) #> Range: [2, 500]"},{"path":"https://dials.tidymodels.org/dev/reference/class_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for class weights for imbalanced problems ‚Äî class_weights","title":"Parameters for class weights for imbalanced problems ‚Äî class_weights","text":"parameter can used moderate much influence certain classes receive training.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/class_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for class weights for imbalanced problems ‚Äî class_weights","text":"","code":"class_weights(range = c(1, 10), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/class_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for class weights for imbalanced problems ‚Äî class_weights","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/class_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for class weights for imbalanced problems ‚Äî class_weights","text":"Used brulee::brulee_logistic_reg() brulee::brulee_mlp()","code":""},{"path":"https://dials.tidymodels.org/dev/reference/class_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for class weights for imbalanced problems ‚Äî class_weights","text":"","code":"class_weights() #> Minority Class Weight (quantitative) #> Range: [1, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"Parameters possible engine parameters partykit models","code":""},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"","code":"conditional_min_criterion(   range = c(1.386294, 15),   trans = scales::transform_logit() )  values_test_type  conditional_test_type(values = values_test_type)  values_test_statistic  conditional_test_statistic(values = values_test_statistic)"},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"object class character length 4. object class character length 2.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"range two-element vector holding defaults smallest largest possible values, respectively. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values character string possible values.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"functions, return function classes \"param\" either \"quant_param\" \"qual_param\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/conditional_min_criterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for partykit models ‚Äî conditional_min_criterion","text":"range conditional_min_criterion() corresponds roughly 0.80 0.99997 natural units. several test types, parameter corresponds 1 - {p-value}.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Support vector machine parameters ‚Äî cost","title":"Support vector machine parameters ‚Äî cost","text":"Parameters related SVM objective function(s).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support vector machine parameters ‚Äî cost","text":"","code":"cost(range = c(-10, 5), trans = transform_log2())  svm_margin(range = c(0, 0.2), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support vector machine parameters ‚Äî cost","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Support vector machine parameters ‚Äî cost","text":"","code":"cost() #> Cost (quantitative) #> Transformer: log-2 [1e-100, Inf] #> Range (transformed scale): [-10, 5] svm_margin() #> Insensitivity Margin (quantitative) #> Range: [0, 0.2]"},{"path":"https://dials.tidymodels.org/dev/reference/cubist_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","title":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","text":"parameters auxiliary models use \"Cubist\" engine. correspond tuning parameters specified using set_engine(\"Cubist0\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cubist_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","text":"","code":"extrapolation(range = c(1, 110), trans = NULL)  unbiased_rules(values = c(TRUE, FALSE))  max_rules(range = c(1L, 100L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/cubist_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values unbiased_rules(),  either TRUE FALSE.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cubist_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","text":"use , check ?Cubist::cubistControl see used.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/cubist_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for Cubist ‚Äî extrapolation","text":"","code":"extrapolation() #> Percent Allowable Extrapolation (quantitative) #> Range: [1, 110] unbiased_rules() #> Use Unbiased Rules?  (qualitative) #> 2 possible values include: #> TRUE and FALSE  max_rules() #> Maximum Number of Rules (quantitative) #> Range: [1, 100]"},{"path":"https://dials.tidymodels.org/dev/reference/deg_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Degrees of freedom (integer) ‚Äî deg_free","title":"Degrees of freedom (integer) ‚Äî deg_free","text":"number degrees freedom used model parameters.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/deg_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degrees of freedom (integer) ‚Äî deg_free","text":"","code":"deg_free(range = c(1L, 5L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/deg_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degrees of freedom (integer) ‚Äî deg_free","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/deg_free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Degrees of freedom (integer) ‚Äî deg_free","text":"One context parameter used spline basis functions.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/deg_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degrees of freedom (integer) ‚Äî deg_free","text":"","code":"deg_free() #> Degrees of Freedom (quantitative) #> Range: [1, 5]"},{"path":"https://dials.tidymodels.org/dev/reference/degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for exponents ‚Äî degree","title":"Parameters for exponents ‚Äî degree","text":"parameters help model cases exponent interest (e.g. degree() spline_degree()) product used (e.g. prod_degree).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for exponents ‚Äî degree","text":"","code":"degree(range = c(1, 3), trans = NULL)  degree_int(range = c(1L, 3L), trans = NULL)  spline_degree(range = c(1L, 10L), trans = NULL)  prod_degree(range = c(1L, 2L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for exponents ‚Äî degree","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/degree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for exponents ‚Äî degree","text":"degree() helpful parameters real number exponents (e.g. x^degree) whereas degree_int() cases exponent integer. difference degree_int() spline_degree() default ranges (based context /used). prod_degree() used parsnip::mars() number terms interactions (generates integer).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for exponents ‚Äî degree","text":"","code":"degree() #> Polynomial Degree (quantitative) #> Range: [1, 3] degree_int() #> Polynomial Degree (quantitative) #> Range: [1, 3] spline_degree() #> Spline Degrees of Freedom (quantitative) #> Range: [1, 10] prod_degree() #> Degree of Interaction (quantitative) #> Range: [1, 2]"},{"path":"https://dials.tidymodels.org/dev/reference/dials-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dials: Tools for working with tuning parameters ‚Äî dials-package","title":"dials: Tools for working with tuning parameters ‚Äî dials-package","text":"dials provides framework defining, creating, managing tuning parameters modeling. contains functions create tuning parameter objects (e.g. mtry() penalty()) others creating tuning grids (e.g. grid_regular()). also functions generating random values specifying transformation parameters.","code":""},{"path":[]},{"path":"https://dials.tidymodels.org/dev/reference/dials-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dials: Tools for working with tuning parameters ‚Äî dials-package","text":"Maintainer: Hannah Frick hannah@posit.co Authors: Max Kuhn max@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dials-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dials: Tools for working with tuning parameters ‚Äî dials-package","text":"","code":"# Suppose we were tuning a linear regression model that was fit with glmnet # and there was a predictor that used a spline basis function to enable a # nonlinear fit. We can use `penalty()` and `mixture()` for the glmnet parts # and `deg_free()` for the spline.  # A full 3^3 factorial design where the regularization parameter is on # the log scale: simple_set <- grid_regular(penalty(), mixture(), deg_free(), levels = 3) simple_set #> # A tibble: 27 √ó 3 #>         penalty mixture deg_free #>           <dbl>   <dbl>    <int> #>  1 0.0000000001     0          1 #>  2 0.00001          0          1 #>  3 1                0          1 #>  4 0.0000000001     0.5        1 #>  5 0.00001          0.5        1 #>  6 1                0.5        1 #>  7 0.0000000001     1          1 #>  8 0.00001          1          1 #>  9 1                1          1 #> 10 0.0000000001     0          3 #> # ‚Ñπ 17 more rows  # A random grid of 5 combinations set.seed(362) random_set <- grid_random(penalty(), mixture(), deg_free(), size = 5) random_set #> # A tibble: 5 √ó 3 #>        penalty mixture deg_free #>          <dbl>   <dbl>    <int> #> 1 0.00137        0.186        1 #> 2 0.0979         0.199        1 #> 3 0.00000251     0.494        1 #> 4 0.00000766     0.790        2 #> 5 0.0000000324   0.251        3  # A small space-filling design based on experimental design methods: design_set <- grid_space_filling(penalty(), mixture(), deg_free(), size = 5) design_set #> # A tibble: 5 √ó 3 #>        penalty mixture deg_free #>          <dbl>   <dbl>    <int> #> 1 0.0000000001    0.75        2 #> 2 0.0000000316    0.5         5 #> 3 0.00001         0           1 #> 4 0.00316         1           3 #> 5 1               0.25        4"},{"path":"https://dials.tidymodels.org/dev/reference/dist_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Minkowski distance parameter ‚Äî dist_power","title":"Minkowski distance parameter ‚Äî dist_power","text":"Used parsnip::nearest_neighbor().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dist_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minkowski distance parameter ‚Äî dist_power","text":"","code":"dist_power(range = c(1, 2), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/dist_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minkowski distance parameter ‚Äî dist_power","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dist_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minkowski distance parameter ‚Äî dist_power","text":"parameter controls distances calculated. example, dist_power = 1 corresponds Manhattan distance dist_power = 2 Euclidean distance.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dist_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minkowski distance parameter ‚Äî dist_power","text":"","code":"dist_power() #> Minkowski Distance Order (quantitative) #> Range: [1, 2]"},{"path":"https://dials.tidymodels.org/dev/reference/dropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Neural network parameters ‚Äî dropout","title":"Neural network parameters ‚Äî dropout","text":"functions generate parameters useful neural network models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neural network parameters ‚Äî dropout","text":"","code":"dropout(range = c(0, 1), trans = NULL)  epochs(range = c(10L, 1000L), trans = NULL)  hidden_units(range = c(1L, 10L), trans = NULL)  hidden_units_2(range = c(1L, 10L), trans = NULL)  batch_size(range = c(unknown(), unknown()), trans = transform_log2())"},{"path":"https://dials.tidymodels.org/dev/reference/dropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neural network parameters ‚Äî dropout","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dropout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neural network parameters ‚Äî dropout","text":"dropout(): parameter dropout rate. (See parsnip:::mlp()). epochs(): number iterations training. (See parsnip:::mlp()). hidden_units(): number hidden units network layer. (See parsnip:::mlp()). batch_size(): mini-batch size neural networks.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/dropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neural network parameters ‚Äî dropout","text":"","code":"dropout() #> Dropout Rate (quantitative) #> Range: [0, 1)"},{"path":"https://dials.tidymodels.org/dev/reference/earth_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","title":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","text":"parameters auxiliary models use \"earth\" engine. correspond tuning parameters specified using set_engine(\"earth\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/earth_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","text":"","code":"max_num_terms(range = c(20L, 200L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/earth_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/earth_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","text":"use , check ?earth::earth see used.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/earth_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for earth models ‚Äî max_num_terms","text":"","code":"max_num_terms() #> Maximum Number of Terms (quantitative) #> Range: [20, 200]"},{"path":"https://dials.tidymodels.org/dev/reference/encode_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","title":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","text":"Class converting parameter values back forth unit range","code":""},{"path":"https://dials.tidymodels.org/dev/reference/encode_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","text":"","code":"encode_unit(x, value, direction, ...)  # S3 method for class 'quant_param' encode_unit(x, value, direction, original = TRUE, ...)  # S3 method for class 'qual_param' encode_unit(x, value, direction, ...)"},{"path":"https://dials.tidymodels.org/dev/reference/encode_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","text":"x param object. value original values either numeric character. converting back, [0, 1]. direction Either \"forward\" ([0, 1]) \"backward\". original logical; values transformed natural units.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/encode_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","text":"vector values.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/encode_unit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for converting parameter values back and forth to the unit range ‚Äî encode_unit","text":"integer parameters, encoding can lossy.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to finalize data-specific parameter ranges ‚Äî finalize","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"functions take parameter object modify unknown parts ranges based data set simple heuristics.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"","code":"finalize(object, ...)  # S3 method for class 'list' finalize(object, x, force = TRUE, ...)  # S3 method for class 'param' finalize(object, x, force = TRUE, ...)  # S3 method for class 'parameters' finalize(object, x, force = TRUE, ...)  # S3 method for class 'logical' finalize(object, x, force = TRUE, ...)  # Default S3 method finalize(object, x, force = TRUE, ...)  get_p(object, x, log_vals = FALSE, ...)  get_log_p(object, x, ...)  get_n_frac(object, x, log_vals = FALSE, frac = 1/3, ...)  get_n_frac_range(object, x, log_vals = FALSE, frac = c(1/10, 5/10), ...)  get_n(object, x, log_vals = FALSE, ...)  get_rbf_range(object, x, seed = sample.int(10^5, 1), ...)  get_batch_sizes(object, x, frac = c(1/10, 1/3), ...)"},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"object param object list param objects. ... arguments pass underlying parameter finalizer functions. example, get_rbf_range(), dots passed along kernlab::sigest(). x predictor data. cases (see ) include numeric data. force single logical indicates even parameter object complete, update ranges anyway? log_vals logical: ranges set log10 scale? frac double fraction data used upper bound. get_n_frac_range() get_batch_sizes(), vector two fractional values required. seed integer control randomness calculations.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"updated param object list updated param objects depending provided object.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"finalize() runs embedded finalizer function contained param object (object$finalize) returns updated version. finalization function one get_*() helpers. get_*() helper functions designed used pipe update parameter object -place. get_p() get_log_p() set upper value range number columns data (natural log10 scale, respectively). get_n() get_n_frac() set upper value number rows data fraction total number rows. get_rbf_range() sets bounds based heuristic defined kernlab::sigest(). requires columns x numeric.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/finalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to finalize data-specific parameter ranges ‚Äî finalize","text":"","code":"library(dplyr) #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union car_pred <- select(mtcars, -mpg)  # Needs an upper bound mtry() #> # Randomly Selected Predictors (quantitative) #> Range: [1, ?] finalize(mtry(), car_pred) #> # Randomly Selected Predictors (quantitative) #> Range: [1, 10]  # Nothing to do here since no unknowns penalty() #> Amount of Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0] finalize(penalty(), car_pred) #> Amount of Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0]  library(kernlab) #>  #> Attaching package: ‚Äòkernlab‚Äô #> The following object is masked from ‚Äòpackage:scales‚Äô: #>  #>     alpha library(tibble) library(purrr) #>  #> Attaching package: ‚Äòpurrr‚Äô #> The following object is masked from ‚Äòpackage:kernlab‚Äô: #>  #>     cross #> The following object is masked from ‚Äòpackage:scales‚Äô: #>  #>     discard  params <-   tribble(     ~parameter, ~object,     \"mtry\", mtry(),     \"num_terms\", num_terms(),     \"rbf_sigma\", rbf_sigma()   ) params #> # A tibble: 3 √ó 2 #>   parameter object      #>   <chr>     <list>      #> 1 mtry      <nparam[?]> #> 2 num_terms <nparam[?]> #> 3 rbf_sigma <nparam[+]>  # Note that `rbf_sigma()` has a default range that does not need to be # finalized but will be changed if used in the function: complete_params <-   params %>%   mutate(object = map(object, finalize, car_pred)) complete_params #> # A tibble: 3 √ó 2 #>   parameter object      #>   <chr>     <list>      #> 1 mtry      <nparam[+]> #> 2 num_terms <nparam[+]> #> 3 rbf_sigma <nparam[+]>  params %>%   dplyr::filter(parameter == \"rbf_sigma\") %>%   pull(object) #> [[1]] #> Radial Basis Function sigma (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0] #>  complete_params %>%   dplyr::filter(parameter == \"rbf_sigma\") %>%   pull(object) #> [[1]] #> Radial Basis Function sigma (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-1.61, 0.0841] #>"},{"path":"https://dials.tidymodels.org/dev/reference/freq_cut.html","id":null,"dir":"Reference","previous_headings":"","what":"Near-zero variance parameters ‚Äî freq_cut","title":"Near-zero variance parameters ‚Äî freq_cut","text":"parameters control specificity filter near-zero variance parameters recipes::step_nzv().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/freq_cut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Near-zero variance parameters ‚Äî freq_cut","text":"","code":"freq_cut(range = c(5, 25), trans = NULL)  unique_cut(range = c(0, 100), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/freq_cut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Near-zero variance parameters ‚Äî freq_cut","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/freq_cut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Near-zero variance parameters ‚Äî freq_cut","text":"Smaller values freq_cut() unique_cut() make filter less sensitive.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/freq_cut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Near-zero variance parameters ‚Äî freq_cut","text":"","code":"freq_cut() #> Frequency Distribution Ratio (quantitative) #> Range: [5, 25] unique_cut() #> % Unique Values (quantitative) #> Range: [0, 100]"},{"path":"https://dials.tidymodels.org/dev/reference/grid_max_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Max-entropy and latin hypercube grids ‚Äî grid_max_entropy","title":"Max-entropy and latin hypercube grids ‚Äî grid_max_entropy","text":"functions deprecated replaced grid_space_filling().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_max_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Max-entropy and latin hypercube grids ‚Äî grid_max_entropy","text":"","code":"grid_max_entropy(   x,   ...,   size = 3,   original = TRUE,   variogram_range = 0.5,   iter = 1000 )  # S3 method for class 'parameters' grid_max_entropy(   x,   ...,   size = 3,   original = TRUE,   variogram_range = 0.5,   iter = 1000 )  # S3 method for class 'list' grid_max_entropy(   x,   ...,   size = 3,   original = TRUE,   variogram_range = 0.5,   iter = 1000 )  # S3 method for class 'param' grid_max_entropy(   x,   ...,   size = 3,   original = TRUE,   variogram_range = 0.5,   iter = 1000 )  grid_latin_hypercube(x, ..., size = 3, original = TRUE)  # S3 method for class 'parameters' grid_latin_hypercube(x, ..., size = 3, original = TRUE)  # S3 method for class 'list' grid_latin_hypercube(x, ..., size = 3, original = TRUE)  # S3 method for class 'param' grid_latin_hypercube(x, ..., size = 3, original = TRUE)"},{"path":"https://dials.tidymodels.org/dev/reference/grid_max_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Max-entropy and latin hypercube grids ‚Äî grid_max_entropy","text":"x param object, list, parameters. ... One param objects (mtry() penalty()). None objects can unknown() values parameter ranges values. size single integer maximum number parameter value combinations returned. duplicate combinations generated size, smaller, unique set returned. original logical: parameters original units transformed space ()? variogram_range numeric value greater zero. Larger values reduce likelihood empty regions parameter space. used type = \"max_entropy\". iter integer maximum number iterations used find good design. used type = \"max_entropy\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_max_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Max-entropy and latin hypercube grids ‚Äî grid_max_entropy","text":"","code":"grid_latin_hypercube(penalty(), mixture(), original = TRUE) #> Warning: `grid_latin_hypercube()` was deprecated in dials 1.3.0. #> ‚Ñπ Please use `grid_space_filling()` instead. #> # A tibble: 3 √ó 2 #>        penalty mixture #>          <dbl>   <dbl> #> 1 0.000378      0.435  #> 2 0.0000000140  0.0806 #> 3 0.00102       0.974"},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grids of tuning parameters ‚Äî grid_regular","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"Random regular grids can created number parameter objects.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"","code":"grid_regular(x, ..., levels = 3, original = TRUE, filter = NULL)  # S3 method for class 'parameters' grid_regular(x, ..., levels = 3, original = TRUE, filter = NULL)  # S3 method for class 'list' grid_regular(x, ..., levels = 3, original = TRUE, filter = NULL)  # S3 method for class 'param' grid_regular(x, ..., levels = 3, original = TRUE, filter = NULL)  grid_random(x, ..., size = 5, original = TRUE, filter = NULL)  # S3 method for class 'parameters' grid_random(x, ..., size = 5, original = TRUE, filter = NULL)  # S3 method for class 'list' grid_random(x, ..., size = 5, original = TRUE, filter = NULL)  # S3 method for class 'param' grid_random(x, ..., size = 5, original = TRUE, filter = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"x param object, list, parameters. ... One param objects (mtry() penalty()). None objects can unknown() values parameter ranges values. levels integer number values parameter use make regular grid. levels can single integer vector integers length number parameters .... levels can named integer vector, names match id values parameters. original logical: parameters original units transformed space ()? filter logical: parameters filtered prior generating grid. Must single expression referencing parameter names evaluates logical vector. size single integer total number parameter value combinations returned random grid. duplicate combinations generated size, smaller, unique set returned.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"tibble. columns parameter row every parameter combination.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"Note may difference grids depending function called. call uses parameter objects directly possible ranges come objects dials. example:         However, cases, parsnip recipe packages overrides default ranges specific models preprocessing steps. grid function uses parameters object created model recipe, ranges may different defaults (specific models). Using example , mixture argument different glmnet models:","code":"mixture() ## Proportion of Lasso Penalty (quantitative) ## Range: [0, 1] set.seed(283) mix_grid_1 <- grid_random(mixture(), size = 1000) range(mix_grid_1$mixture) ## [1] 0.001490161 0.999741096 library(parsnip) library(tune)  # When used with glmnet, the range is [0.05, 1.00] glmn_mod <-   linear_reg(mixture = tune()) %>%   set_engine(\"glmnet\")  set.seed(283) mix_grid_2 <- grid_random(extract_parameter_set_dials(glmn_mod), size = 1000) range(mix_grid_2$mixture) ## [1] 0.05141565 0.99975404"},{"path":"https://dials.tidymodels.org/dev/reference/grid_regular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create grids of tuning parameters ‚Äî grid_regular","text":"","code":"# filter arg will allow you to filter subsequent grid data frame based on some condition. p <- parameters(penalty(), mixture()) grid_regular(p) #> # A tibble: 9 √ó 2 #>        penalty mixture #>          <dbl>   <dbl> #> 1 0.0000000001     0   #> 2 0.00001          0   #> 3 1                0   #> 4 0.0000000001     0.5 #> 5 0.00001          0.5 #> 6 1                0.5 #> 7 0.0000000001     1   #> 8 0.00001          1   #> 9 1                1   grid_regular(p, filter = penalty <= .01) #> # A tibble: 6 √ó 2 #>        penalty mixture #>          <dbl>   <dbl> #> 1 0.0000000001     0   #> 2 0.00001          0   #> 3 0.0000000001     0.5 #> 4 0.00001          0.5 #> 5 0.0000000001     1   #> 6 0.00001          1    # Will fail due to unknowns: # grid_regular(mtry(), min_n())  grid_regular(penalty(), mixture()) #> # A tibble: 9 √ó 2 #>        penalty mixture #>          <dbl>   <dbl> #> 1 0.0000000001     0   #> 2 0.00001          0   #> 3 1                0   #> 4 0.0000000001     0.5 #> 5 0.00001          0.5 #> 6 1                0.5 #> 7 0.0000000001     1   #> 8 0.00001          1   #> 9 1                1   grid_regular(penalty(), mixture(), levels = 3:4) #> # A tibble: 12 √ó 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001   0     #>  2 0.00001        0     #>  3 1              0     #>  4 0.0000000001   0.333 #>  5 0.00001        0.333 #>  6 1              0.333 #>  7 0.0000000001   0.667 #>  8 0.00001        0.667 #>  9 1              0.667 #> 10 0.0000000001   1     #> 11 0.00001        1     #> 12 1              1     grid_regular(penalty(), mixture(), levels = c(mixture = 4, penalty = 3)) #> # A tibble: 12 √ó 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001   0     #>  2 0.00001        0     #>  3 1              0     #>  4 0.0000000001   0.333 #>  5 0.00001        0.333 #>  6 1              0.333 #>  7 0.0000000001   0.667 #>  8 0.00001        0.667 #>  9 1              0.667 #> 10 0.0000000001   1     #> 11 0.00001        1     #> 12 1              1     grid_random(penalty(), mixture()) #> # A tibble: 5 √ó 2 #>        penalty mixture #>          <dbl>   <dbl> #> 1 0.0000000246  0.490  #> 2 0.000000510   0.985  #> 3 0.000458      0.923  #> 4 0.00202       0.590  #> 5 0.827         0.0951"},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":null,"dir":"Reference","previous_headings":"","what":"Space-filling parameter grids ‚Äî grid_space_filling","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"Experimental designs computer experiments used construct parameter grids try cover parameter space portion space observed combination unnecessarily close point.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"","code":"grid_space_filling(x, ..., size = 5, type = \"any\", original = TRUE)  # S3 method for class 'parameters' grid_space_filling(   x,   ...,   size = 5,   type = \"any\",   variogram_range = 0.5,   iter = 1000,   original = TRUE )  # S3 method for class 'list' grid_space_filling(   x,   ...,   size = 5,   type = \"any\",   variogram_range = 0.5,   iter = 1000,   original = TRUE )  # S3 method for class 'param' grid_space_filling(   x,   ...,   size = 5,   variogram_range = 0.5,   iter = 1000,   type = \"any\",   original = TRUE )"},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"x param object, list, parameters. ... One param objects (mtry() penalty()). None objects can unknown() values parameter ranges values. size single integer maximum number parameter value combinations returned. duplicate combinations generated size, smaller, unique set returned. type character string possible values: \"\", \"audze_eglais\", \"max_min_l1\", \"max_min_l2\", \"uniform\", \"max_entropy\", \"latin_hypercube\". value \"\" choose first design available (order listed , excluding \"latin_hypercube\"). design extremely small, function may change type \"latin_hypercube\" (warning). original logical: parameters original units transformed space ()? variogram_range numeric value greater zero. Larger values reduce likelihood empty regions parameter space. used type = \"max_entropy\". iter integer maximum number iterations used find good design. used type = \"max_entropy\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"types designs supported latin hypercube designs different types. simple designs produced grid_latin_hypercube() space-filling don‚Äôt guarantee optimize properties. grid_space_filling() might able produce designs discourage grid points close one another. lot methods , maximizing minimum distance points (see Husslage et al 2001). grid_max_entropy() attempts maximize determinant spatial correlation matrix coordinates. Latin hypercube maximum entropy designs use random numbers make designs. default, grid_space_filling() try use pre-optimized space-filling design https://www.spacefillingdesigns.nl/ (see Husslage et al, 2011) using uniform design. pre-made design available, maximum entropy design created. Also note may difference grids depending function called. call uses parameter objects directly possible ranges come objects dials. example:         However, cases, parsnip recipe packages overrides default ranges specific models preprocessing steps. grid function uses parameters object created model recipe, ranges may different defaults (specific models). Using example , mixture argument different glmnet models:","code":"mixture() ## Proportion of Lasso Penalty (quantitative) ## Range: [0, 1] set.seed(283) mix_grid_1 <- grid_latin_hypercube(mixture(), size = 1000) range(mix_grid_1$mixture) ## [1] 0.0001530482 0.9999530388 library(parsnip) library(tune)  # When used with glmnet, the range is [0.05, 1.00] glmn_mod <-   linear_reg(mixture = tune()) %>%   set_engine(\"glmnet\")  set.seed(283) mix_grid_2 <-   glmn_mod %>%   extract_parameter_set_dials() %>%   grid_latin_hypercube(size = 1000) range(mix_grid_2$mixture) ## [1] 0.0501454 0.9999554"},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"Sacks, Jerome & Welch, William & J. Mitchell, Toby, Wynn, Henry. (1989). Design analysis computer experiments. comments rejoinder authors. Statistical Science. 4. 10.1214/ss/1177012413. Santner, Thomas, Williams, Brian, Notz, William. (2003). Design Analysis Computer Experiments. Springer. Dupuy, D., Helbert, C., Franco, J. (2015). DiceDesign DiceEval: Two R packages design analysis computer experiments. Journal Statistical Software, 65(11) Husslage, B. G., Rennen, G., Van Dam, E. R., & Den Hertog, D. (2011). Space-filling Latin hypercube designs computer experiments. Optimization Engineering, 12, 611-630. Fang, K. T., Lin, D. K., Winker, P., & Zhang, Y. (2000). Uniform design: Theory application. _Technometric_s, 42(3), 237-248","code":""},{"path":"https://dials.tidymodels.org/dev/reference/grid_space_filling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Space-filling parameter grids ‚Äî grid_space_filling","text":"","code":"grid_space_filling(   hidden_units(),   penalty(),   epochs(),   activation(),   learn_rate(c(0, 1), trans = scales::transform_log()),   size = 10,   original = FALSE ) #> # A tibble: 10 √ó 5 #>    hidden_units       penalty epochs activation learn_rate #>           <int>         <dbl>  <int> <chr>           <dbl> #>  1            1 0.00599          890 softmax          1.74 #>  2            2 0.000000215      230 relu             1    #>  3            3 0.00000278       340 elu              2.43 #>  4            4 0.0000000001     450 tanh             2.18 #>  5            5 0.0774            10 softmax          1.95 #>  6            6 0.00000000129   1000 linear           1.40 #>  7            7 1                560 elu              1.25 #>  8            8 0.0000359        670 tanh             1.12 #>  9            9 0.000464         780 relu             2.72 #> 10           10 0.0000000167     120 linear           1.56 # ------------------------------------------------------------------------------ # comparing methods  if (rlang::is_installed(\"ggplot2\")) {    library(dplyr)   library(ggplot2)    set.seed(383)   parameters(trees(), mixture()) %>%     grid_space_filling(size = 25, type = \"latin_hypercube\") %>%     ggplot(aes(trees, mixture)) +     geom_point() +     lims(y = 0:1, x = c(1, 2000)) +     ggtitle(\"latin hypercube\")    set.seed(383)   parameters(trees(), mixture()) %>%     grid_space_filling(size = 25, type = \"max_entropy\") %>%     ggplot(aes(trees, mixture)) +     geom_point() +     lims(y = 0:1, x = c(1, 2000)) +     ggtitle(\"maximum entropy\")    parameters(trees(), mixture()) %>%     grid_space_filling(size = 25, type = \"audze_eglais\") %>%     ggplot(aes(trees, mixture)) +     geom_point() +     lims(y = 0:1, x = c(1, 2000)) +     ggtitle(\"Audze-Eglais\")    parameters(trees(), mixture()) %>%     grid_space_filling(size = 25, type = \"uniform\") %>%     ggplot(aes(trees, mixture)) +     geom_point() +     lims(y = 0:1, x = c(1, 2000)) +     ggtitle(\"uniform\") } #>  #> Attaching package: ‚Äòggplot2‚Äô #> The following object is masked from ‚Äòpackage:kernlab‚Äô: #>  #>     alpha"},{"path":"https://dials.tidymodels.org/dev/reference/harmonic_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonic Frequency ‚Äî harmonic_frequency","title":"Harmonic Frequency ‚Äî harmonic_frequency","text":"Used recipes::step_harmonic().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/harmonic_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonic Frequency ‚Äî harmonic_frequency","text":"","code":"harmonic_frequency(range = c(0.01, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/harmonic_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonic Frequency ‚Äî harmonic_frequency","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/harmonic_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonic Frequency ‚Äî harmonic_frequency","text":"","code":"harmonic_frequency() #> Harmonic Frequency (quantitative) #> Range: [0.01, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method for UMAP ‚Äî initial_umap","title":"Initialization method for UMAP ‚Äî initial_umap","text":"parameter type initialization UMAP coordinates. Can one \"spectral\", \"normlaplacian\", \"random\", \"lvrandom\", \"laplacian\", \"pca\", \"spca\", \"agspectral\". See uwot::umap() details.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization method for UMAP ‚Äî initial_umap","text":"","code":"initial_umap(values = values_initial_umap)  values_initial_umap"},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Initialization method for UMAP ‚Äî initial_umap","text":"object class character length 8.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method for UMAP ‚Äî initial_umap","text":"values character string possible values. See values_initial_umap examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialization method for UMAP ‚Äî initial_umap","text":"parameter used recipes via embed::step_umap().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/initial_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method for UMAP ‚Äî initial_umap","text":"","code":"values_initial_umap #> [1] \"spectral\"      \"normlaplacian\" \"random\"        \"lvrandom\"      #> [5] \"laplacian\"     \"pca\"           \"spca\"          \"agspectral\"    initial_umap() #> UMAP Initialization  (qualitative) #> 8 possible values include: #> 'spectral', 'normlaplacian', 'random', 'lvrandom', 'laplacian', 'pca', ..."},{"path":"https://dials.tidymodels.org/dev/reference/learn_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Learning rate ‚Äî learn_rate","title":"Learning rate ‚Äî learn_rate","text":"parameter used boosting methods (parsnip::boost_tree()) types neural network optimization methods.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/learn_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learning rate ‚Äî learn_rate","text":"","code":"learn_rate(range = c(-10, -1), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/learn_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learning rate ‚Äî learn_rate","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/learn_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Learning rate ‚Äî learn_rate","text":"parameter used log10 scale. units range function scale. learn_rate() corresponds eta xgboost.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/learn_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learning rate ‚Äî learn_rate","text":"","code":"learn_rate() #> Learning Rate (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1]"},{"path":"https://dials.tidymodels.org/dev/reference/lightgbm_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible engine parameters for lightbgm ‚Äî num_leaves","title":"Possible engine parameters for lightbgm ‚Äî num_leaves","text":"parameters auxiliary tree-based models use \"lightgbm\" engine. correspond tuning parameters specified using set_engine(\"lightgbm\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/lightgbm_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible engine parameters for lightbgm ‚Äî num_leaves","text":"","code":"num_leaves(range = c(5, 100), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/lightgbm_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible engine parameters for lightbgm ‚Äî num_leaves","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/lightgbm_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Possible engine parameters for lightbgm ‚Äî num_leaves","text":"\"lightbgm\" available engine parsnip extension package bonsai information, see lightgbm webpage.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/lightgbm_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible engine parameters for lightbgm ‚Äî num_leaves","text":"","code":"num_leaves() #> Number of Leaves (quantitative) #> Range: [5, 100]"},{"path":"https://dials.tidymodels.org/dev/reference/max_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Word frequencies for removal ‚Äî max_times","title":"Word frequencies for removal ‚Äî max_times","text":"Used textrecipes::step_tokenfilter().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/max_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Word frequencies for removal ‚Äî max_times","text":"","code":"max_times(range = c(1L, as.integer(10^5)), trans = NULL)  min_times(range = c(0L, 1000L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/max_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Word frequencies for removal ‚Äî max_times","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/max_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Word frequencies for removal ‚Äî max_times","text":"","code":"max_times() #> Maximum Token Frequency (quantitative) #> Range: [1, 100000] min_times() #> Minimum Token Frequency (quantitative) #> Range: [0, 1000]"},{"path":"https://dials.tidymodels.org/dev/reference/max_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of retained tokens ‚Äî max_tokens","title":"Maximum number of retained tokens ‚Äî max_tokens","text":"Used textrecipes::step_tokenfilter().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/max_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of retained tokens ‚Äî max_tokens","text":"","code":"max_tokens(range = c(0L, as.integer(10^3)), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/max_tokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of retained tokens ‚Äî max_tokens","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/max_tokens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of retained tokens ‚Äî max_tokens","text":"","code":"max_tokens() #> # Retained Tokens (quantitative) #> Range: [0, 1000]"},{"path":"https://dials.tidymodels.org/dev/reference/min_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter for the effective minimum distance between embedded points ‚Äî min_dist","title":"Parameter for the effective minimum distance between embedded points ‚Äî min_dist","text":"Used embed::step_umap().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/min_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter for the effective minimum distance between embedded points ‚Äî min_dist","text":"","code":"min_dist(range = c(-4, 0), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/min_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter for the effective minimum distance between embedded points ‚Äî min_dist","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/min_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter for the effective minimum distance between embedded points ‚Äî min_dist","text":"","code":"min_dist() #> Min Distance between Points (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-4, 0]"},{"path":"https://dials.tidymodels.org/dev/reference/min_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of unique values for pre-processing ‚Äî min_unique","title":"Number of unique values for pre-processing ‚Äî min_unique","text":"pre-processing parameters require minimum number unique data points proceed. Used recipes::step_discretize().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/min_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of unique values for pre-processing ‚Äî min_unique","text":"","code":"min_unique(range = c(5L, 15L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/min_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of unique values for pre-processing ‚Äî min_unique","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/min_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of unique values for pre-processing ‚Äî min_unique","text":"","code":"min_unique() #> Unique Value Threshold (quantitative) #> Range: [5, 15]"},{"path":"https://dials.tidymodels.org/dev/reference/mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture of penalization terms ‚Äî mixture","title":"Mixture of penalization terms ‚Äî mixture","text":"numeric parameter function representing relative amount penalties (e.g. L1, L2, etc) regularized models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture of penalization terms ‚Äî mixture","text":"","code":"mixture(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture of penalization terms ‚Äî mixture","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mixture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixture of penalization terms ‚Äî mixture","text":"parameter used regularized penalized models parsnip::linear_reg(), parsnip::logistic_reg(), others. formulated proportion L1 regularization (.e. lasso) model. glmnet model, mixture = 1 pure lasso model mixture = 0 indicates ridge regression used.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixture of penalization terms ‚Äî mixture","text":"","code":"mixture() #> Proportion of Lasso Penalty (quantitative) #> Range: [0, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/momentum.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient descent momentum parameter ‚Äî momentum","title":"Gradient descent momentum parameter ‚Äî momentum","text":"useful parameter neural network models using gradient descent","code":""},{"path":"https://dials.tidymodels.org/dev/reference/momentum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient descent momentum parameter ‚Äî momentum","text":"","code":"momentum(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/momentum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient descent momentum parameter ‚Äî momentum","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/momentum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient descent momentum parameter ‚Äî momentum","text":"","code":"momentum() #> Gradient Descent Momentum (quantitative) #> Range: [0, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of randomly sampled predictors ‚Äî mtry","title":"Number of randomly sampled predictors ‚Äî mtry","text":"number predictors randomly sampled split creating tree models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of randomly sampled predictors ‚Äî mtry","text":"","code":"mtry(range = c(1L, unknown()), trans = NULL)  mtry_long(range = c(0L, unknown()), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of randomly sampled predictors ‚Äî mtry","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of randomly sampled predictors ‚Äî mtry","text":"parameter used regularized penalized models parsnip::rand_forest() others. mtry_long() values log10 scale helpful data contain large number predictors. Since scale parameter depends number columns data set, upper bound set unknown can filled via finalize() method.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Number of randomly sampled predictors ‚Äî mtry","text":"mtry_prop() variation mtry() value interpreted proportion predictors randomly sampled split rather count. parameter intended use accommodating engines take argument proportion; mtry often main model argument rather engine-specific argument, thus engine-specific interface. wrapping modeling engines interpret mtry sense proportion, use mtry() parameter parsnip::set_model_arg() process passed argument internal wrapping function mtry / number_of_predictors. addition, introduce logical argument counts wrapping function, defaulting TRUE, indicates whether interpret supplied argument count rather proportion. example implementation, see parsnip::xgb_train().","code":""},{"path":[]},{"path":"https://dials.tidymodels.org/dev/reference/mtry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of randomly sampled predictors ‚Äî mtry","text":"","code":"mtry(c(1L, 10L)) # in original units #> # Randomly Selected Predictors (quantitative) #> Range: [1, 10] mtry_long(c(0, 5)) # in log10 units #> # Randomly Selected Predictors (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [0, 5]"},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"proportion predictors randomly sampled split creating tree models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"","code":"mtry_prop(range = c(0.1, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"dials object classes \"quant_param\" \"param\". range element object always converted list elements \"lower\" \"upper\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"mtry_prop() variation mtry() value interpreted proportion predictors randomly sampled split rather count. parameter intended use accommodating engines take argument proportion; mtry often main model argument rather engine-specific argument, thus engine-specific interface. wrapping modeling engines interpret mtry sense proportion, use mtry() parameter parsnip::set_model_arg() process passed argument internal wrapping function mtry / number_of_predictors. addition, introduce logical argument counts wrapping function, defaulting TRUE, indicates whether interpret supplied argument count rather proportion. example implementation, see parsnip::xgb_train().","code":""},{"path":[]},{"path":"https://dials.tidymodels.org/dev/reference/mtry_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of Randomly Selected Predictors ‚Äî mtry_prop","text":"","code":"mtry_prop() #> Proportion Randomly Selected Predictors (quantitative) #> Range: [0.1, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of neighbors ‚Äî neighbors","title":"Number of neighbors ‚Äî neighbors","text":"number neighbors used models (parsnip::nearest_neighbor()), imputation (recipes::step_impute_knn()), dimension reduction (recipes::step_isomap()).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of neighbors ‚Äî neighbors","text":"","code":"neighbors(range = c(1L, 10L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of neighbors ‚Äî neighbors","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/neighbors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of neighbors ‚Äî neighbors","text":"static range used broader range used data set large neighbors required.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of neighbors ‚Äî neighbors","text":"","code":"neighbors() #> # Nearest Neighbors (quantitative) #> Range: [1, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/new-param.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for creating new parameter objects ‚Äî new-param","title":"Tools for creating new parameter objects ‚Äî new-param","text":"functions used construct new parameter objects. Generally, functions called higher level parameter generating functions like mtry().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/new-param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for creating new parameter objects ‚Äî new-param","text":"","code":"new_quant_param(   type = c(\"double\", \"integer\"),   range = NULL,   inclusive = NULL,   default = deprecated(),   trans = NULL,   values = NULL,   label = NULL,   finalize = NULL,   ...,   call = caller_env() )  new_qual_param(   type = c(\"character\", \"logical\"),   values,   default = deprecated(),   label = NULL,   finalize = NULL,   ...,   call = caller_env() )"},{"path":"https://dials.tidymodels.org/dev/reference/new-param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for creating new parameter objects ‚Äî new-param","text":"type single character value. quantitative parameters, valid choices \"double\" \"integer\" qualitative factors \"character\" \"logical\". range two-element vector smallest largest possible values, respectively. set parameter defined, unknown() function can used. transformation specified, values transformed units. values supplied, range NULL, range set range(values). inclusive two-element logical vector whether range values inclusive exclusive. values supplied, inclusive NULL, inclusive set c(TRUE, TRUE). default longer used. value supplied, ignored warning thrown. trans trans object scales package, scales::transform_log() scales::transform_reciprocal(). Create custom transforms scales::new_transform(). values vector possible values required type \"character\" \"logical\" optional otherwise. quantitative parameters, can used alternative range inclusive. set, used value_seq() value_sample(). label optional named character string can used printing plotting. name match object name (e.g. \"mtry\", \"neighbors\", etc.) finalize function can used set data-specific values parameter (range). ... dots future extensions must empty. call call passed cli::cli_abort().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/new-param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for creating new parameter objects ‚Äî new-param","text":"object class \"param\" primary class either \"quant_param\" \"qual_param\". range element object always converted list elements \"lower\" \"upper\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/new-param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for creating new parameter objects ‚Äî new-param","text":"","code":"# Create a function that generates a quantitative parameter # corresponding to the number of subgroups. num_subgroups <- function(range = c(1L, 20L), trans = NULL) {   new_quant_param(     type = \"integer\",     range = range,     inclusive = c(TRUE, TRUE),     trans = trans,     label = c(num_subgroups = \"# Subgroups\"),     finalize = NULL   ) }  num_subgroups() #> # Subgroups (quantitative) #> Range: [1, 20]  num_subgroups(range = c(3L, 5L)) #> # Subgroups (quantitative) #> Range: [3, 5]  # Custom parameters instantly have access # to sequence generating functions value_seq(num_subgroups(), 5) #> [1]  1  5 10 15 20"},{"path":"https://dials.tidymodels.org/dev/reference/num_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of cut-points for binning ‚Äî num_breaks","title":"Number of cut-points for binning ‚Äî num_breaks","text":"parameter controls many bins used discretizing predictors. Used recipes::step_discretize() embed::step_discretize_xgb().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of cut-points for binning ‚Äî num_breaks","text":"","code":"num_breaks(range = c(2L, 10L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of cut-points for binning ‚Äî num_breaks","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of cut-points for binning ‚Äî num_breaks","text":"","code":"num_breaks() #> Number of Cut Points (quantitative) #> Range: [2, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/num_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Clusters ‚Äî num_clusters","title":"Number of Clusters ‚Äî num_clusters","text":"Used tidyclust models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Clusters ‚Äî num_clusters","text":"","code":"num_clusters(range = c(1L, 10L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Clusters ‚Äî num_clusters","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Clusters ‚Äî num_clusters","text":"","code":"num_clusters() #> # Clusters (quantitative) #> Range: [1, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/num_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of new features ‚Äî num_comp","title":"Number of new features ‚Äî num_comp","text":"number derived predictors models feature engineering methods.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of new features ‚Äî num_comp","text":"","code":"num_comp(range = c(1L, unknown()), trans = NULL)  num_terms(range = c(1L, unknown()), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of new features ‚Äî num_comp","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_comp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of new features ‚Äî num_comp","text":"Since scale parameters often depends number columns data set, upper bound set unknown. example, number PCA components limited number columns . difference num_comp() num_terms() semantics.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of new features ‚Äî num_comp","text":"","code":"num_terms() #> # Model Terms (quantitative) #> Range: [1, ?] num_terms(c(2L, 10L)) #> # Model Terms (quantitative) #> Range: [2, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/num_knots.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of knots (integer) ‚Äî num_knots","title":"Number of knots (integer) ‚Äî num_knots","text":"number knots used spline model parameters.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_knots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of knots (integer) ‚Äî num_knots","text":"","code":"num_knots(range = c(0L, 5L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_knots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of knots (integer) ‚Äî num_knots","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_knots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of knots (integer) ‚Äî num_knots","text":"One context parameter used spline basis functions.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_knots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of knots (integer) ‚Äî num_knots","text":"","code":"num_knots() #> Number of knots (quantitative) #> Range: [0, 5]"},{"path":"https://dials.tidymodels.org/dev/reference/num_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Computation Runs ‚Äî num_runs","title":"Number of Computation Runs ‚Äî num_runs","text":"Used recipes::step_nnmf().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Computation Runs ‚Äî num_runs","text":"","code":"num_runs(range = c(1L, 10L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Computation Runs ‚Äî num_runs","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Computation Runs ‚Äî num_runs","text":"","code":"num_runs() #> Number of Computation Runs (quantitative) #> Range: [1, 10]"},{"path":"https://dials.tidymodels.org/dev/reference/num_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter to determine number of tokens in ngram ‚Äî num_tokens","title":"Parameter to determine number of tokens in ngram ‚Äî num_tokens","text":"Used textrecipes::step_ngram().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter to determine number of tokens in ngram ‚Äî num_tokens","text":"","code":"num_tokens(range = c(1, 3), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/num_tokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter to determine number of tokens in ngram ‚Äî num_tokens","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/num_tokens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter to determine number of tokens in ngram ‚Äî num_tokens","text":"","code":"num_tokens() #> Number of tokens (quantitative) #> Range: [1, 3]"},{"path":"https://dials.tidymodels.org/dev/reference/over_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for class-imbalance sampling ‚Äî over_ratio","title":"Parameters for class-imbalance sampling ‚Äî over_ratio","text":"- -sampling methods, parameters control much data added removed training set. Used themis::step_rose(), themis::step_smotenc(), themis::step_bsmote(), themis::step_upsample(), themis::step_downsample(), themis::step_nearmiss().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/over_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for class-imbalance sampling ‚Äî over_ratio","text":"","code":"over_ratio(range = c(0.8, 1.2), trans = NULL)  under_ratio(range = c(0.8, 1.2), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/over_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for class-imbalance sampling ‚Äî over_ratio","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/over_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for class-imbalance sampling ‚Äî over_ratio","text":"","code":"under_ratio() #> Under-Sampling Ratio (quantitative) #> Range: [0.8, 1.2] over_ratio() #> Over-Sampling Ratio (quantitative) #> Range: [0.8, 1.2]"},{"path":"https://dials.tidymodels.org/dev/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Information on tuning parameters within an object ‚Äî parameters","title":"Information on tuning parameters within an object ‚Äî parameters","text":"Information tuning parameters within object","code":""},{"path":"https://dials.tidymodels.org/dev/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information on tuning parameters within an object ‚Äî parameters","text":"","code":"parameters(x, ...)  # Default S3 method parameters(x, ...)  # S3 method for class 'param' parameters(x, ...)  # S3 method for class 'list' parameters(x, ...)"},{"path":"https://dials.tidymodels.org/dev/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information on tuning parameters within an object ‚Äî parameters","text":"x object, list param objects actual param object. ... used param method multiple param objects can passed function.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/parameters_constr.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new parameter set object ‚Äî parameters_constr","title":"Construct a new parameter set object ‚Äî parameters_constr","text":"Construct new parameter set object","code":""},{"path":"https://dials.tidymodels.org/dev/reference/parameters_constr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new parameter set object ‚Äî parameters_constr","text":"","code":"parameters_constr(   name,   id,   source,   component,   component_id,   object,   ...,   call = caller_env() )"},{"path":"https://dials.tidymodels.org/dev/reference/parameters_constr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new parameter set object ‚Äî parameters_constr","text":"name, id, source, component, component_id Character strings length. object list param objects NA values. ... dots future extensions must empty. call call passed cli::cli_abort().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/parameters_constr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new parameter set object ‚Äî parameters_constr","text":"tibble encapsulates input vectors tibble additional class \"parameters\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Amount of regularization/penalization ‚Äî penalty","title":"Amount of regularization/penalization ‚Äî penalty","text":"numeric parameter function representing amount penalties (e.g. L1, L2, etc) regularized models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amount of regularization/penalization ‚Äî penalty","text":"","code":"penalty(range = c(-10, 0), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amount of regularization/penalization ‚Äî penalty","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/penalty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Amount of regularization/penalization ‚Äî penalty","text":"parameter used regularized penalized models parsnip::linear_reg(), parsnip::logistic_reg(), others.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amount of regularization/penalization ‚Äî penalty","text":"","code":"penalty() #> Amount of Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0]"},{"path":"https://dials.tidymodels.org/dev/reference/predictor_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of predictors ‚Äî predictor_prop","title":"Proportion of predictors ‚Äî predictor_prop","text":"parameter used models parameter proportion predictor variables.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/predictor_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of predictors ‚Äî predictor_prop","text":"","code":"predictor_prop(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/predictor_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of predictors ‚Äî predictor_prop","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/predictor_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportion of predictors ‚Äî predictor_prop","text":"predictor_prop() used step_pls().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/predictor_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of predictors ‚Äî predictor_prop","text":"","code":"predictor_prop() #> Proportion of Predictors (quantitative) #> Range: (0, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/prior_slab_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","title":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","text":"numeric parameter function representing parameters spike--slab prior used embed::step_pca_sparse_bayes().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prior_slab_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","text":"","code":"prior_slab_dispersion(range = c(-1/2, log10(3)), trans = transform_log10())  prior_mixture_threshold(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/prior_slab_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prior_slab_dispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","text":"prior_slab_dispersion() related prior case PCA loading selected (.e. non-zero). Smaller values result increase zero coefficients. prior_mixture_threshold() used threshold prior determine parameters non-zero zero. Increasing parameter increases number zero coefficients.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prior_slab_dispersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian PCA parameters ‚Äî prior_slab_dispersion","text":"","code":"mixture() #> Proportion of Lasso Penalty (quantitative) #> Range: [0, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":null,"dir":"Reference","previous_headings":"","what":"MARS pruning methods ‚Äî prune_method","title":"MARS pruning methods ‚Äî prune_method","text":"MARS pruning methods","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MARS pruning methods ‚Äî prune_method","text":"","code":"prune_method(values = values_prune_method)  values_prune_method"},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MARS pruning methods ‚Äî prune_method","text":"object class character length 6.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MARS pruning methods ‚Äî prune_method","text":"values character string possible values. See values_prune_method examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MARS pruning methods ‚Äî prune_method","text":"parameter used parsnip:::mars().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/prune_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MARS pruning methods ‚Äî prune_method","text":"","code":"values_prune_method #> [1] \"backward\"   \"none\"       \"exhaustive\" \"forward\"    \"seqrep\"     #> [6] \"cv\"         prune_method() #> Pruning Method  (qualitative) #> 6 possible values include: #> 'backward', 'none', 'exhaustive', 'forward', 'seqrep' and 'cv'"},{"path":"https://dials.tidymodels.org/dev/reference/randomForest_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for randomForest ‚Äî max_nodes","title":"Parameters for possible engine parameters for randomForest ‚Äî max_nodes","text":"parameters auxiliary random forest models use \"randomForest\" engine. correspond tuning parameters specified using set_engine(\"randomForest\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/randomForest_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for randomForest ‚Äî max_nodes","text":"","code":"max_nodes(range = c(100L, 10000L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/randomForest_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for randomForest ‚Äî max_nodes","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/randomForest_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for randomForest ‚Äî max_nodes","text":"","code":"max_nodes() #> Maximum Number of Terminal Nodes (quantitative) #> Range: [100, 10000]"},{"path":"https://dials.tidymodels.org/dev/reference/range_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for working with parameter ranges ‚Äî range_validate","title":"Tools for working with parameter ranges ‚Äî range_validate","text":"Setters, getters, validators parameter ranges.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/range_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for working with parameter ranges ‚Äî range_validate","text":"","code":"range_validate(object, range, ukn_ok = TRUE, ..., call = caller_env())  range_get(object, original = TRUE)  range_set(object, range)"},{"path":"https://dials.tidymodels.org/dev/reference/range_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for working with parameter ranges ‚Äî range_validate","text":"object object class quant_param. range two-element numeric vector list (including Inf). Values can include unknown() ukn_ok = TRUE. ukn_ok single logical whether unknown() acceptable value. ... dots future extensions must empty. call call passed cli::cli_abort(). original single logical. range values natural units (TRUE) transformed space (FALSE, applicable)?","code":""},{"path":"https://dials.tidymodels.org/dev/reference/range_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for working with parameter ranges ‚Äî range_validate","text":"range_validate() returns new range passes validation process (throws error otherwise). range_get() returns current range object. range_set() returns updated version parameter object new range.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/range_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for working with parameter ranges ‚Äî range_validate","text":"","code":"library(dplyr)  my_lambda <- penalty() %>%   value_set(-4:-1)  try(   range_validate(my_lambda, c(-10, NA)),   silent = TRUE ) %>%   print() #> [1] \"Error in eval(expr, envir) : \\n  \\033[1m\\033[22m\\033[31m‚úñ\\033[39m Value ranges must be non-missing.\\n\\033[36m‚Ñπ\\033[39m `Inf` and `unknown()` are acceptable values.\\n\" #> attr(,\"class\") #> [1] \"try-error\" #> attr(,\"condition\") #> <error/rlang_error> #> Error: #> ‚úñ Value ranges must be non-missing. #> ‚Ñπ `Inf` and `unknown()` are acceptable values. #> --- #> Backtrace: #>      ‚ñÜ #>   1. ‚îî‚îÄpkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   ‚îî‚îÄpkgdown::build_site(...) #>   3.     ‚îî‚îÄpkgdown:::build_site_local(...) #>   4.       ‚îî‚îÄpkgdown::build_reference(...) #>   5.         ‚îú‚îÄpkgdown:::unwrap_purrr_error(...) #>   6.         ‚îÇ ‚îî‚îÄbase::withCallingHandlers(...) #>   7.         ‚îî‚îÄpurrr::map(...) #>   8.           ‚îî‚îÄpurrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ‚îú‚îÄpurrr:::with_indexed_errors(...) #>  10.             ‚îÇ ‚îî‚îÄbase::withCallingHandlers(...) #>  11.             ‚îú‚îÄpurrr:::call_with_cleanup(...) #>  12.             ‚îî‚îÄpkgdown (local) .f(.x[[i]], ...) #>  13.               ‚îú‚îÄbase::withCallingHandlers(...) #>  14.               ‚îî‚îÄpkgdown:::data_reference_topic(...) #>  15.                 ‚îî‚îÄpkgdown:::run_examples(...) #>  16.                   ‚îî‚îÄpkgdown:::highlight_examples(code, topic, env = env) #>  17.                     ‚îî‚îÄdownlit::evaluate_and_highlight(...) #>  18.                       ‚îî‚îÄevaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         ‚îú‚îÄbase::withRestarts(...) #>  20.                         ‚îÇ ‚îî‚îÄbase (local) withRestartList(expr, restarts) #>  21.                         ‚îÇ   ‚îú‚îÄbase (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  22.                         ‚îÇ   ‚îÇ ‚îî‚îÄbase (local) doWithOneRestart(return(expr), restart) #>  23.                         ‚îÇ   ‚îî‚îÄbase (local) withRestartList(expr, restarts[-nr]) #>  24.                         ‚îÇ     ‚îú‚îÄbase (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  25.                         ‚îÇ     ‚îÇ ‚îî‚îÄbase (local) doWithOneRestart(return(expr), restart) #>  26.                         ‚îÇ     ‚îî‚îÄbase (local) withRestartList(expr, restarts[-nr]) #>  27.                         ‚îÇ       ‚îî‚îÄbase (local) withOneRestart(expr, restarts[[1L]]) #>  28.                         ‚îÇ         ‚îî‚îÄbase (local) doWithOneRestart(return(expr), restart) #>  29.                         ‚îú‚îÄevaluate:::with_handlers(...) #>  30.                         ‚îÇ ‚îú‚îÄbase::eval(call) #>  31.                         ‚îÇ ‚îÇ ‚îî‚îÄbase::eval(call) #>  32.                         ‚îÇ ‚îî‚îÄbase::withCallingHandlers(...) #>  33.                         ‚îú‚îÄbase::withVisible(eval(expr, envir)) #>  34.                         ‚îî‚îÄbase::eval(expr, envir) #>  35.                           ‚îî‚îÄbase::eval(expr, envir)  range_get(my_lambda) #> $lower #> [1] 1e-10 #>  #> $upper #> [1] 1 #>   my_lambda %>%   range_set(c(-10, 2)) %>%   range_get() #> $lower #> [1] 1e-10 #>  #> $upper #> [1] 100 #>"},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"parameters auxiliary random forest models use \"ranger\" engine. correspond tuning parameters specified using set_engine(\"ranger\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"","code":"regularization_factor(range = c(0, 1), trans = NULL)  regularize_depth(values = c(TRUE, FALSE))  significance_threshold(range = c(-10, 0), trans = transform_log10())  lower_quantile(range = c(0, 1), trans = NULL)  splitting_rule(values = ranger_split_rules)  ranger_class_rules  ranger_reg_rules  ranger_split_rules  num_random_splits(range = c(1L, 15L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"object class character length 4. object class character length 3. object class character length 7.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values splitting_rule(), character string possible values. See ranger_split_rules, ranger_class_rules, ranger_reg_rules appropriate values. regularize_depth(), either TRUE FALSE.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"use , check ?ranger::ranger see used. conditional others. example, significance_threshold(), num_random_splits(), others used splitting_rule = \"extratrees\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/ranger_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for ranger ‚Äî regularization_factor","text":"","code":"regularization_factor() #> Gain Penalization (quantitative) #> Range: [0, 1] regularize_depth() #> Regularize Tree Depth?  (qualitative) #> 2 possible values include: #> TRUE and FALSE"},{"path":"https://dials.tidymodels.org/dev/reference/rbf_sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel parameters ‚Äî rbf_sigma","title":"Kernel parameters ‚Äî rbf_sigma","text":"Parameters related radial basis kernel functions.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/rbf_sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel parameters ‚Äî rbf_sigma","text":"","code":"rbf_sigma(range = c(-10, 0), trans = transform_log10())  scale_factor(range = c(-10, -1), trans = transform_log10())  kernel_offset(range = c(0, 2), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/rbf_sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel parameters ‚Äî rbf_sigma","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/rbf_sigma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel parameters ‚Äî rbf_sigma","text":"degree() can also used kernel functions.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/rbf_sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel parameters ‚Äî rbf_sigma","text":"","code":"rbf_sigma() #> Radial Basis Function sigma (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0] scale_factor() #> Scale Factor (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1] kernel_offset() #> Offset (quantitative) #> Range: [0, 2]"},{"path":"https://dials.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. hardhat extract_parameter_dials","code":""},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation methods for regularized models ‚Äî regularization_method","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"Estimation methods regularized models","code":""},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"","code":"regularization_method(values = values_regularization_method)  values_regularization_method"},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"object class character length 4.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"values character string possible values. See values_regularization_method examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"parameter used parsnip::discrim_linear().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/regularization_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation methods for regularized models ‚Äî regularization_method","text":"","code":"values_regularization_method #> [1] \"diagonal\"     \"min_distance\" \"shrink_cov\"   \"shrink_mean\"  regularization_method() #> Regularization Method  (qualitative) #> 4 possible values include: #> 'diagonal', 'min_distance', 'shrink_cov' and 'shrink_mean'"},{"path":"https://dials.tidymodels.org/dev/reference/scheduler-param.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","title":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","text":"Parameters neural network learning rate schedulers parameters used constructing neural network models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/scheduler-param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","text":"","code":"rate_initial(range = c(-3, -1), trans = transform_log10())  rate_largest(range = c(-1, -1/2), trans = transform_log10())  rate_reduction(range = c(1/5, 1), trans = NULL)  rate_steps(range = c(2, 10), trans = NULL)  rate_step_size(range = c(2, 20), trans = NULL)  rate_decay(range = c(0, 2), trans = NULL)  rate_schedule(values = values_scheduler)  values_scheduler"},{"path":"https://dials.tidymodels.org/dev/reference/scheduler-param.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","text":"object class character length 5.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/scheduler-param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values character string possible values. See values_scheduler examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/scheduler-param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for neural network learning rate schedulers These parameters are used for constructing neural network models. ‚Äî scheduler-param","text":"parameters often used neural networks via parsnip::mlp(engine = \"brulee\"). details brulee schedulers change rates: schedule_decay_time(): \\(rate(epoch) = initial/(1 + decay \\times epoch)\\) schedule_decay_expo(): \\(rate(epoch) = initial\\exp(-decay \\times epoch)\\) schedule_step(): \\(rate(epoch) = initial \\times reduction^{floor(epoch / steps)}\\) schedule_cyclic(): \\(cycle = floor( 1 + (epoch / 2 / step size) )\\), \\(x = abs( ( epoch / step size ) - ( 2 * cycle) + 1 )\\), \\(rate(epoch) = initial + ( largest - initial ) * \\max( 0, 1 - x)\\)","code":""},{"path":"https://dials.tidymodels.org/dev/reference/select_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter to enable feature selection ‚Äî select_features","title":"Parameter to enable feature selection ‚Äî select_features","text":"Used parsnip::gen_additive_mod().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/select_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter to enable feature selection ‚Äî select_features","text":"","code":"select_features(values = c(TRUE, FALSE))"},{"path":"https://dials.tidymodels.org/dev/reference/select_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter to enable feature selection ‚Äî select_features","text":"values vector possible values (TRUE FALSE).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/select_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter to enable feature selection ‚Äî select_features","text":"","code":"select_features() #> Select Features?  (qualitative) #> 2 possible values include: #> TRUE and FALSE"},{"path":"https://dials.tidymodels.org/dev/reference/shrinkage_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","title":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","text":"functions can used optimize engine-specific parameters sda::sda() via parsnip::discrim_linear().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/shrinkage_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","text":"","code":"shrinkage_correlation(range = c(0, 1), trans = NULL)  shrinkage_variance(range = c(0, 1), trans = NULL)  shrinkage_frequencies(range = c(0, 1), trans = NULL)  diagonal_covariance(values = c(TRUE, FALSE))"},{"path":"https://dials.tidymodels.org/dev/reference/shrinkage_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values vector possible values (TRUE FALSE).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/shrinkage_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","text":"functions, return function classes \"param\" either \"quant_param\" \"qual_param\".","code":""},{"path":"https://dials.tidymodels.org/dev/reference/shrinkage_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for sda models ‚Äî shrinkage_correlation","text":"functions map sda::sda() arguments via: shrinkage_correlation() lambda shrinkage_variance() lambda.var shrinkage_frequencies() lambda.freqs diagonal_covariance() diagonal","code":""},{"path":"https://dials.tidymodels.org/dev/reference/smoothness.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Smoothness ‚Äî smoothness","title":"Kernel Smoothness ‚Äî smoothness","text":"Used discrim::naive_Bayes().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/smoothness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Smoothness ‚Äî smoothness","text":"","code":"smoothness(range = c(0.5, 1.5), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/smoothness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Smoothness ‚Äî smoothness","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/smoothness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Smoothness ‚Äî smoothness","text":"","code":"smoothness() #> Kernel Smoothness (quantitative) #> Range: [0.5, 1.5]"},{"path":"https://dials.tidymodels.org/dev/reference/stop_iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Early stopping parameter ‚Äî stop_iter","title":"Early stopping parameter ‚Äî stop_iter","text":"models, effectiveness model can decrease training iterations continue. stop_iter() can used tune many iterations without improvement objective function occur training halted.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/stop_iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Early stopping parameter ‚Äî stop_iter","text":"","code":"stop_iter(range = c(3L, 20L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/stop_iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Early stopping parameter ‚Äî stop_iter","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/stop_iter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Early stopping parameter ‚Äî stop_iter","text":"","code":"stop_iter() #> # Iterations Before Stopping (quantitative) #> Range: [3, 20]"},{"path":"https://dials.tidymodels.org/dev/reference/summary_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling summary statistic for moving windows ‚Äî summary_stat","title":"Rolling summary statistic for moving windows ‚Äî summary_stat","text":"parameter used recipes::step_window().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/summary_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling summary statistic for moving windows ‚Äî summary_stat","text":"","code":"summary_stat(values = values_summary_stat)  values_summary_stat"},{"path":"https://dials.tidymodels.org/dev/reference/summary_stat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rolling summary statistic for moving windows ‚Äî summary_stat","text":"object class character length 8.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/summary_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling summary statistic for moving windows ‚Äî summary_stat","text":"values character string possible values. See values_summary_stat examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/summary_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling summary statistic for moving windows ‚Äî summary_stat","text":"","code":"values_summary_stat #> [1] \"mean\"   \"median\" \"sd\"     \"var\"    \"sum\"    \"prod\"   \"min\"    #> [8] \"max\"    summary_stat() #> Rolling Summary Statistic  (qualitative) #> 8 possible values include: #> 'mean', 'median', 'sd', 'var', 'sum', 'prod', 'min' and 'max'"},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric distributions for censored data ‚Äî surv_dist","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"Parametric distributions censored data","code":""},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"","code":"surv_dist(values = values_surv_dist)  values_surv_dist"},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"object class character length 6.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"values character string possible values. See values_surv_dist examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"parameter used parsnip::survival_reg().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/surv_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric distributions for censored data ‚Äî surv_dist","text":"","code":"values_surv_dist #> [1] \"weibull\"     \"exponential\" \"gaussian\"    \"logistic\"    \"lognormal\"   #> [6] \"loglogistic\" surv_dist() #> Distribution  (qualitative) #> 6 possible values include: #> 'weibull', 'exponential', 'gaussian', 'logistic', 'lognormal' and 'logl..."},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Model Link Function ‚Äî survival_link","title":"Survival Model Link Function ‚Äî survival_link","text":"Survival Model Link Function","code":""},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Model Link Function ‚Äî survival_link","text":"","code":"survival_link(values = values_survival_link)  values_survival_link"},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survival Model Link Function ‚Äî survival_link","text":"object class character length 3.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Model Link Function ‚Äî survival_link","text":"values character string possible values. See values_survival_link examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Survival Model Link Function ‚Äî survival_link","text":"parameter used parsnip::set_engine('flexsurvspline').","code":""},{"path":"https://dials.tidymodels.org/dev/reference/survival_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival Model Link Function ‚Äî survival_link","text":"","code":"values_survival_link #> [1] \"hazard\" \"odds\"   \"normal\" survival_link() #> Survival Link  (qualitative) #> 3 possible values include: #> 'hazard', 'odds' and 'normal'"},{"path":"https://dials.tidymodels.org/dev/reference/target_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Amount of supervision parameter ‚Äî target_weight","title":"Amount of supervision parameter ‚Äî target_weight","text":"uwot::umap() embed::step_umap(), weighting factor data topology target topology. value 0.0 weights entirely data, value 1.0 weights entirely target. default 0.5 balances weighting equally data target.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/target_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amount of supervision parameter ‚Äî target_weight","text":"","code":"target_weight(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/target_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amount of supervision parameter ‚Äî target_weight","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/target_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Amount of supervision parameter ‚Äî target_weight","text":"parameter used recipes via embed::step_umap().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/target_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amount of supervision parameter ‚Äî target_weight","text":"","code":"target_weight() #> Proportion Supervised (quantitative) #> Range: [0, 1)"},{"path":"https://dials.tidymodels.org/dev/reference/texthash.html","id":null,"dir":"Reference","previous_headings":"","what":"Text hashing parameters ‚Äî num_hash","title":"Text hashing parameters ‚Äî num_hash","text":"Used textrecipes::step_texthash() textrecipes::step_dummy_hash().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/texthash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text hashing parameters ‚Äî num_hash","text":"","code":"num_hash(range = c(8L, 12L), trans = transform_log2())  signed_hash(values = c(TRUE, FALSE))"},{"path":"https://dials.tidymodels.org/dev/reference/texthash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text hashing parameters ‚Äî num_hash","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values vector possible values (TRUE FALSE).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/texthash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text hashing parameters ‚Äî num_hash","text":"","code":"num_hash() #> # Hash Features (quantitative) #> Transformer: log-2 [1e-100, Inf] #> Range (transformed scale): [8, 12] signed_hash() #> Signed Hash Value  (qualitative) #> 2 possible values include: #> TRUE and FALSE"},{"path":"https://dials.tidymodels.org/dev/reference/threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"General thresholding parameter ‚Äî threshold","title":"General thresholding parameter ‚Äî threshold","text":"number cases, arguments threshold values data falling zero one. example, recipes::step_other() .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General thresholding parameter ‚Äî threshold","text":"","code":"threshold(range = c(0, 1), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General thresholding parameter ‚Äî threshold","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General thresholding parameter ‚Äî threshold","text":"","code":"threshold() #> Threshold (quantitative) #> Range: [0, 1]"},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":null,"dir":"Reference","previous_headings":"","what":"Token types ‚Äî token","title":"Token types ‚Äî token","text":"Token types","code":""},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Token types ‚Äî token","text":"","code":"token(values = values_token)  values_token"},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Token types ‚Äî token","text":"object class character length 12.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token types ‚Äî token","text":"values character string possible values. See values_token examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Token types ‚Äî token","text":"parameter used textrecipes::step_tokenize().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Token types ‚Äî token","text":"","code":"values_token #>  [1] \"words\"             \"characters\"        \"character_shingle\" #>  [4] \"lines\"             \"ngrams\"            \"paragraphs\"        #>  [7] \"ptb\"               \"regex\"             \"sentences\"         #> [10] \"skip_ngrams\"       \"tweets\"            \"word_stems\"        token() #> Token Unit  (qualitative) #> 12 possible values include: #> 'words', 'characters', 'character_shingle', 'lines', 'ngrams', 'paragra..."},{"path":"https://dials.tidymodels.org/dev/reference/trees.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter functions related to tree- and rule-based models. ‚Äî trees","title":"Parameter functions related to tree- and rule-based models. ‚Äî trees","text":"parameter generating functions can used modeling, especially conjunction parsnip package.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter functions related to tree- and rule-based models. ‚Äî trees","text":"","code":"trees(range = c(1L, 2000L), trans = NULL)  min_n(range = c(2L, 40L), trans = NULL)  sample_size(range = c(unknown(), unknown()), trans = NULL)  sample_prop(range = c(1/10, 1), trans = NULL)  loss_reduction(range = c(-10, 1.5), trans = transform_log10())  tree_depth(range = c(1L, 15L), trans = NULL)  prune(values = c(TRUE, FALSE))  cost_complexity(range = c(-10, -1), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/trees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter functions related to tree- and rule-based models. ‚Äî trees","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL. values vector possible values (TRUE FALSE).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/trees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter functions related to tree- and rule-based models. ‚Äî trees","text":"functions generate parameters useful model based trees rules. trees(): number trees contained random forest boosted ensemble. latter case, equal number boosting iterations. (See parsnip::rand_forest() parsnip::boost_tree()). min_n(): minimum number data points node required node split . (See parsnip::rand_forest() parsnip::boost_tree()). sample_size(): size data set used modeling within iteration modeling algorithm, stochastic gradient boosting. (See parsnip::boost_tree()). sample_prop(): sample_size() proportion total sample. loss_reduction(): reduction loss function required split . (See parsnip::boost_tree()). corresponds gamma xgboost. tree_depth(): maximum depth tree (.e. number splits). (See parsnip::boost_tree()). prune(): logical whether tree set rules pruned. cost_complexity(): cost-complexity parameter classical CART models.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/trees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter functions related to tree- and rule-based models. ‚Äî trees","text":"","code":"trees() #> # Trees (quantitative) #> Range: [1, 2000] min_n() #> Minimal Node Size (quantitative) #> Range: [2, 40] sample_size() #> # Observations Sampled (quantitative) #> Range: [?, ?] loss_reduction() #> Minimum Loss Reduction (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 1.5] tree_depth() #> Tree Depth (quantitative) #> Range: [1, 15] prune() #> Pruning  (qualitative) #> 2 possible values include: #> TRUE and FALSE  cost_complexity() #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1]"},{"path":"https://dials.tidymodels.org/dev/reference/trim_amount.html","id":null,"dir":"Reference","previous_headings":"","what":"Amount of Trimming ‚Äî trim_amount","title":"Amount of Trimming ‚Äî trim_amount","text":"Used recipes::step_impute_mean().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/trim_amount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amount of Trimming ‚Äî trim_amount","text":"","code":"trim_amount(range = c(0, 0.5), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/trim_amount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amount of Trimming ‚Äî trim_amount","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/trim_amount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amount of Trimming ‚Äî trim_amount","text":"","code":"trim_amount() #> Amount of Trimming (quantitative) #> Range: [0, 0.5]"},{"path":"https://dials.tidymodels.org/dev/reference/type_sum.param.html","id":null,"dir":"Reference","previous_headings":"","what":"Succinct summary of parameter objects ‚Äî type_sum.param","title":"Succinct summary of parameter objects ‚Äî type_sum.param","text":"type_sum() controls objects shown inside tibble columns.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/type_sum.param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Succinct summary of parameter objects ‚Äî type_sum.param","text":"","code":"# S3 method for class 'param' type_sum(x)"},{"path":"https://dials.tidymodels.org/dev/reference/type_sum.param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Succinct summary of parameter objects ‚Äî type_sum.param","text":"x param object summarise.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/type_sum.param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Succinct summary of parameter objects ‚Äî type_sum.param","text":"character value.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/type_sum.param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Succinct summary of parameter objects ‚Äî type_sum.param","text":"param objects, summary prefix either \"dparam\" (qualitative parameter) \"nparam\" (quantitative). Additionally, brackets used indicate unknown values. example, \"nparam[?]\" indicate part numeric range finalized \"nparam[+]\" indicates parameter complete.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/unknown.html","id":null,"dir":"Reference","previous_headings":"","what":"Placeholder for unknown parameter values ‚Äî unknown","title":"Placeholder for unknown parameter values ‚Äî unknown","text":"unknown() creates expression used signify value specified later time.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/unknown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Placeholder for unknown parameter values ‚Äî unknown","text":"","code":"unknown()  is_unknown(x)  has_unknowns(object)"},{"path":"https://dials.tidymodels.org/dev/reference/unknown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Placeholder for unknown parameter values ‚Äî unknown","text":"x object vector objects test unknown-ness. object object class param.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/unknown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Placeholder for unknown parameter values ‚Äî unknown","text":"unknown() returns expression value unknown(). is_unknown() returns vector logicals long x TRUE element x unknown, FALSE otherwise. has_unknowns() returns single logical indicating range param object unknown values.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/unknown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Placeholder for unknown parameter values ‚Äî unknown","text":"","code":"# Just returns an expression unknown() #> unknown()  # Of course, true! is_unknown(unknown()) #> [1] TRUE  # Create a range with a minimum of 1 # and an unknown maximum range <- c(1, unknown())  range #> [[1]] #> [1] 1 #>  #> [[2]] #> unknown() #>   # The first value is known, the # second is not is_unknown(range) #> [1] FALSE  TRUE  # mtry()'s maximum value is not known at # creation time has_unknowns(mtry()) #> [1] TRUE"},{"path":"https://dials.tidymodels.org/dev/reference/update.parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a single parameter in a parameter set ‚Äî update.parameters","title":"Update a single parameter in a parameter set ‚Äî update.parameters","text":"Update single parameter parameter set","code":""},{"path":"https://dials.tidymodels.org/dev/reference/update.parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a single parameter in a parameter set ‚Äî update.parameters","text":"","code":"# S3 method for class 'parameters' update(object, ...)"},{"path":"https://dials.tidymodels.org/dev/reference/update.parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a single parameter in a parameter set ‚Äî update.parameters","text":"object parameter set. ... One unquoted named values separated commas. names correspond id values parameter set. values parameter objects NA values.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/update.parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a single parameter in a parameter set ‚Äî update.parameters","text":"modified parameter set.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/update.parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a single parameter in a parameter set ‚Äî update.parameters","text":"","code":"params <- list(lambda = penalty(), alpha = mixture(), `rand forest` = mtry()) pset <- parameters(params) pset #> Collection of 3 parameters for tuning #>  #>   identifier    type    object #>       lambda penalty nparam[+] #>        alpha mixture nparam[+] #>  rand forest    mtry nparam[?] #>  #> Parameters needing finalization: #>    # Randomly Selected Predictors ('rand forest') #>  #> See `?dials::finalize` or `?dials::update.parameters` for more information. #>   update(pset, `rand forest` = finalize(mtry(), mtcars), alpha = mixture(c(.1, .2))) #> Collection of 3 parameters for tuning #>  #>   identifier    type    object #>       lambda penalty nparam[+] #>        alpha mixture nparam[+] #>  rand forest    mtry nparam[+] #>"},{"path":"https://dials.tidymodels.org/dev/reference/validation_set_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of data used for validation ‚Äî validation_set_prop","title":"Proportion of data used for validation ‚Äî validation_set_prop","text":"Used embed::step_discretize_xgb().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/validation_set_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of data used for validation ‚Äî validation_set_prop","text":"","code":"validation_set_prop(range = c(0.05, 0.7), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/validation_set_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of data used for validation ‚Äî validation_set_prop","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/validation_set_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of data used for validation ‚Äî validation_set_prop","text":"","code":"validation_set_prop() #> Proportion of data for validation (quantitative) #> Range: [0.05, 0.7]"},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for working with parameter values ‚Äî value_validate","title":"Tools for working with parameter values ‚Äî value_validate","text":"Setters validators parameter values. Additionally, tools creating sequences parameter values transforming parameter values provided.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for working with parameter values ‚Äî value_validate","text":"","code":"value_validate(object, values, ..., call = caller_env())  value_seq(object, n, original = TRUE)  value_sample(object, n, original = TRUE)  value_transform(object, values)  value_inverse(object, values)  value_set(object, values)"},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for working with parameter values ‚Äî value_validate","text":"object object class quant_param. values numeric vector list (including Inf). Values include unknown(). value_validate(), units consistent parameter object's definition. ... dots future extensions must empty. call call passed cli::cli_abort(). n integer (maximum) number values return. cases sequence requested, result might less n values. See Details. original single logical. range values natural units (TRUE) transformed space (FALSE, applicable)?","code":""},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for working with parameter values ‚Äî value_validate","text":"value_validate() throws error silently returns values contained values object. value_transform() value_inverse() return vector numeric values. value_seq() value_sample() return vector values consistent type field object.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for working with parameter values ‚Äî value_validate","text":"sequences integers, code uses unique(floor(seq(min, max, length.= n))) may generate uneven set values shorter n. also means n larger range integers, smaller set generated. qualitative parameters, first n values returned. quantitative parameters, values contained object sampled replacement. Otherwise, sequence values range values returned. possible less n values returned. qualitative parameters, sampling values conducted replacement. qualitative values, random uniform distribution used.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/value_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for working with parameter values ‚Äî value_validate","text":"","code":"library(dplyr)  penalty() %>% value_set(-4:-1) #> Amount of Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0] #> Values: 4  # Is a specific value valid? penalty() #> Amount of Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0] penalty() %>% range_get() #> $lower #> [1] 1e-10 #>  #> $upper #> [1] 1 #>  value_validate(penalty(), 17) #> [1] FALSE  # get a sequence of values cost_complexity() #> Cost-Complexity Parameter (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, -1] cost_complexity() %>% value_seq(4) #> [1] 1e-10 1e-07 1e-04 1e-01 cost_complexity() %>% value_seq(4, original = FALSE) #> [1] -10  -7  -4  -1  on_log_scale <- cost_complexity() %>% value_seq(4, original = FALSE) nat_units <- value_inverse(cost_complexity(), on_log_scale) nat_units #> [1] 1e-10 1e-07 1e-04 1e-01 value_transform(cost_complexity(), nat_units) #> [1] -10  -7  -4  -1  # random values in the range set.seed(3666) cost_complexity() %>% value_sample(2) #> [1] 5.533485e-04 1.480162e-05"},{"path":"https://dials.tidymodels.org/dev/reference/vocabulary_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of tokens in vocabulary ‚Äî vocabulary_size","title":"Number of tokens in vocabulary ‚Äî vocabulary_size","text":"Used textrecipes::step_tokenize_sentencepiece() textrecipes::step_tokenize_bpe().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/vocabulary_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of tokens in vocabulary ‚Äî vocabulary_size","text":"","code":"vocabulary_size(range = c(1000L, 32000L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/vocabulary_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of tokens in vocabulary ‚Äî vocabulary_size","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/vocabulary_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of tokens in vocabulary ‚Äî vocabulary_size","text":"","code":"vocabulary_size() #> # Unique Tokens in Vocabulary (quantitative) #> Range: [1000, 32000]"},{"path":"https://dials.tidymodels.org/dev/reference/weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter for ","title":"Parameter for ","text":"Used textrecipes::step_tf().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter for ","text":"","code":"weight(range = c(-10, 0), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter for ","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter for ","text":"","code":"weight() #> Weight (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 0]"},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel functions for distance weighting ‚Äî weight_func","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"Kernel functions distance weighting","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"","code":"weight_func(values = values_weight_func)  values_weight_func"},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"object class character length 10.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"values character string possible values. See values_weight_func examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"parameter used parsnip:::nearest_neighbors().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel functions for distance weighting ‚Äî weight_func","text":"","code":"values_weight_func #>  [1] \"rectangular\"  \"triangular\"   \"epanechnikov\" \"biweight\"     #>  [5] \"triweight\"    \"cos\"          \"inv\"          \"gaussian\"     #>  [9] \"rank\"         \"optimal\"      weight_func() #> Distance Weighting Function  (qualitative) #> 10 possible values include: #> 'rectangular', 'triangular', 'epanechnikov', 'biweight', 'triweight', '..."},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Term frequency weighting methods ‚Äî weight_scheme","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"Term frequency weighting methods","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"","code":"weight_scheme(values = values_weight_scheme)  values_weight_scheme"},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"object class character length 5.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"values character string possible values. See values_weight_scheme examples .","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"parameter used textrecipes::step_tf().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/weight_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Term frequency weighting methods ‚Äî weight_scheme","text":"","code":"values_weight_scheme #> [1] \"raw count\"            \"binary\"               \"term frequency\"       #> [4] \"log normalization\"    \"double normalization\" weight_scheme() #> Term Frequency Weight Method  (qualitative) #> 5 possible values include: #> 'raw count', 'binary', 'term frequency', 'log normalization' and 'doubl..."},{"path":"https://dials.tidymodels.org/dev/reference/window_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter for the moving window size ‚Äî window_size","title":"Parameter for the moving window size ‚Äî window_size","text":"Used recipes::step_window() recipes::step_impute_roll().","code":""},{"path":"https://dials.tidymodels.org/dev/reference/window_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter for the moving window size ‚Äî window_size","text":"","code":"window_size(range = c(3L, 11L), trans = NULL)"},{"path":"https://dials.tidymodels.org/dev/reference/window_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter for the moving window size ‚Äî window_size","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/window_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter for the moving window size ‚Äî window_size","text":"","code":"window_size() #> Window Size (quantitative) #> Range: [3, 11]"},{"path":"https://dials.tidymodels.org/dev/reference/xgboost_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","title":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","text":"parameters auxiliary tree-based models use \"xgboost\" engine. correspond tuning parameters specified using set_engine(\"xgboost\", ...).","code":""},{"path":"https://dials.tidymodels.org/dev/reference/xgboost_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","text":"","code":"scale_pos_weight(range = c(0.8, 1.2), trans = NULL)  penalty_L2(range = c(-10, 1), trans = transform_log10())  penalty_L1(range = c(-10, 1), trans = transform_log10())"},{"path":"https://dials.tidymodels.org/dev/reference/xgboost_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","text":"range two-element vector holding defaults smallest largest possible values, respectively. transformation specified, values transformed units. trans trans object scales package, scales::transform_log10() scales::transform_reciprocal(). provided, default used matches units used range. transformation, NULL.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/xgboost_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","text":"information, see xgboost webpage.","code":""},{"path":"https://dials.tidymodels.org/dev/reference/xgboost_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for possible engine parameters for xgboost ‚Äî scale_pos_weight","text":"","code":"scale_pos_weight() #> Balance of Events and Non-Events (quantitative) #> Range: [0.8, 1.2] penalty_L2() #> Amount of L2 Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 1] penalty_L1() #> Amount of L1 Regularization (quantitative) #> Transformer: log-10 [1e-100, Inf] #> Range (transformed scale): [-10, 1]"},{"path":[]},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-130","dir":"Changelog","previous_headings":"","what":"dials 1.3.0","title":"dials 1.3.0","text":"CRAN release: 2024-07-30","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"dials 1.3.0","text":"space-filling design functionality expanded include several new types designs: Audze-Eglais, max/min L1, max/min L2, uniform. pre-computed designs accessed sfd package (#329). new function used access space-filling designs called grid_space_filling() (#329). Two new parameters, activation_2() hidden_units_2(), use brulee::brulee_mlp_two_layer() (#339).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"deprecations-1-3-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"dials 1.3.0","text":"grid_max_entropy() grid_latin_hypercube() deprecated favor grid_space_filling() (#332). pull_dials_object() removed (#344). grid_*() methods workflow objects removed (#344). deprecation default argument constructors new_quant_param() new_qual_param() escalated error (#344).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-121","dir":"Changelog","previous_headings":"","what":"dials 1.2.1","title":"dials 1.2.1","text":"CRAN release: 2024-02-22","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameters-1-2-1","dir":"Changelog","previous_headings":"","what":"New parameters","title":"dials 1.2.1","text":"Added initial_umap() target_weight() recipes::step_umap() (#324).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-1-2-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 1.2.1","text":"Improving styling error messages switching cli (#315, #317, #321). Update usage tranformation functions scales package new names require corresponding version v1.3.0 (#323).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-120","dir":"Changelog","previous_headings":"","what":"dials 1.2.0","title":"dials 1.2.0","text":"CRAN release: 2023-04-03","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameters-1-2-0","dir":"Changelog","previous_headings":"","what":"New parameters","title":"dials 1.2.0","text":"Added trim_amount() recipes::step_impute_mean(). Added num_runs() recipes::step_nnmf() (#281). Added harmonic_frequency() recipes::step_harmonic() (#281). Added validation_set_prop() embed::step_discretize_xgb() (#280).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 1.2.0","text":"Deprecation pull_dials_object() escalated error. Please use extract_parameter_dials() instead (#265). methods grid_regular.workflow(), grid_random.workflow(), grid_max_entropy.workflow(), grid_latin_hypercube.workflow() deprecated (#302). constructor functions single parameters, new_quant_param() new_qual_param(), well parameter sets, parameters_constr(), now improved handling call shown error messages (#291, #295). constructor parameter sets, parameters_constr(), now checks inputs length (#295).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-110","dir":"Changelog","previous_headings":"","what":"dials 1.1.0","title":"dials 1.1.0","text":"CRAN release: 2022-11-04","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameters-1-1-0","dir":"Changelog","previous_headings":"","what":"New parameters","title":"dials 1.1.0","text":"Added learning rate scheduler parameters rate_decay(), rate_initial(), rate_largest(), rate_reduction(), rate_schedule(), rate_step_size(), rate_steps() new brulee functions (#253). Added num_clusters() parameter tidyclust models (#259). Added num_leaves() parameter lightbgm models (@joeycouse, #256).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 1.1.0","text":"default argument constructors new_quant_param() new_qual_param() deprecated. value_seq() now uses logic generate sequence parameter values regardless long sequence (#153, #229). prior_terminal_node_expo() Bayesian adaptive regression trees (BART) now defaults range greater 1 limit explosive tree growth (#251). label spline_degree() improved.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-100","dir":"Changelog","previous_headings":"","what":"dials 1.0.0","title":"dials 1.0.0","text":"CRAN release: 2022-06-14 new parameter mtry_prop() variation mtry() value interpreted proportion (rather count) predictors randomly sampled split (#233). conditional_test_statistic() conditional_test_type() now work partykit engine rather party engine (#224). new_quant_param() longer requires range inclusive values supplied (#87).","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-011","dir":"Changelog","previous_headings":"","what":"dials 0.1.1","title":"dials 0.1.1","text":"CRAN release: 2022-04-06 Chicago data set removed. can found modeldata package.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-010","dir":"Changelog","previous_headings":"","what":"dials 0.1.0","title":"dials 0.1.0","text":"CRAN release: 2022-01-31","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameters-0-1-0","dir":"Changelog","previous_headings":"","what":"New parameters","title":"dials 0.1.0","text":"summary_stat() new parameter use recipes::step_window(). general class_weights() parameter added imbalanced models. prior_outcome_range(), prior_terminal_node_coef(), prior_terminal_node_expo() new parameters prior distribution specification related parsnip::bart(). num_knots() survival_link() new parameters spline survival models (@mattwarkentin, #195). vocabulary_size() new parameter used textrecipes::step_tokenize_sentencepiece() textrecipes::step_tokenize_bpe().","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 0.1.0","text":"new extract_parameter_dials() method supersedes pull_dials_object() deprecated. activation() now supports values \"tanh\". New link article explaining make custom parameter objects added pkgdown site.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-0010","dir":"Changelog","previous_headings":"","what":"dials 0.0.10","title":"dials 0.0.10","text":"CRAN release: 2021-09-10","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameters-0-0-10","dir":"Changelog","previous_headings":"","what":"New parameters","title":"dials 0.0.10","text":"adjust_deg_free() select_features() generalized additive models. conditional_min_criterion, conditional_test_statistic, conditional_test_type models party engine. diagonal_covariance(), regularization_method(), shrinkage_correlation(), shrinkage_frequencies(), shrinkage_variance() linear quadratic discriminant analysis. penalty_L1(), penalty_L2(), scale_pos_weight() boosted trees xgboost engine (@joeycouse, #176). prior_mixture_threshold() prior_slab_dispersion() sparse PCA. stop_iter() early stopping.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-0-0-10","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 0.0.10","text":"Re-licensed package GPL-2 MIT. See consent copyright holders . param_set(), scheduled removal version 0.0.5, now removed.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-009","dir":"Changelog","previous_headings":"","what":"dials 0.0.9","title":"dials 0.0.9","text":"CRAN release: 2020-09-16 Quantitative parameters now print number possible values set value_set() (@kmdupr33, #138). print() method parameters() changed clear. new function, pull_dials_object() also added. Duplicate parameter combinations now automatically removed grid results. range epochs() change start 10 iterations instead 1. lower range spline_degree() now starts 1 instead 3. upper range cost() now goes 2^5 instead 2^-1.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-008","dir":"Changelog","previous_headings":"","what":"dials 0.0.8","title":"dials 0.0.8","text":"CRAN release: 2020-07-08 number new parameter objects associated engine-specific functions added engines ‚Äúranger‚Äù, ‚ÄúrandomForest‚Äù, ‚Äúearth‚Äù ‚ÄúC5.0‚Äù.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-007","dir":"Changelog","previous_headings":"","what":"dials 0.0.7","title":"dials 0.0.7","text":"CRAN release: 2020-06-10 grid_*() functions longer generate subclassed tibbles. predictor_prop() added. levels argument tune_grid() can now handle named vector, account differences ordering.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-0-7","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dials 0.0.7","text":"range dist_power() changed lower limit 1. deprecation period margin() ; please use svm_margin() instead.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-006","dir":"Changelog","previous_headings":"","what":"dials 0.0.6","title":"dials 0.0.6","text":"CRAN release: 2020-04-03 Quick bug fix release related range checks 0.0.5. check forgiving required type integer double provided.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-005","dir":"Changelog","previous_headings":"","what":"dials 0.0.5","title":"dials 0.0.5","text":"CRAN release: 2020-04-01 kept original units, parameter‚Äôs range must now data type parameter. Renamed margin() svm_margin() (@gabrielodom @gralgomez, #85) bug space filling designs qualitative parameters fixed (#94) better error message created grids used parameters sets contain parameters require finalization (#99) Space-filling desings now share attributes grid objects (#100) range sample_frac() fixed (#96)","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-004","dir":"Changelog","previous_headings":"","what":"dials 0.0.4","title":"dials 0.0.4","text":"CRAN release: 2019-12-02","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameter-functions-0-0-4","dir":"Changelog","previous_headings":"","what":"New parameter functions:","title":"dials 0.0.4","text":"Parameters smoothness() added.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-0-0-4","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 0.0.4","text":"param_set() renamed parameters(). old name implied use set parameters (say recipe model rather de novo). param_set() available version 0.0.5. range num_hash() increase 2^8 2^12. range max_tokens() changed 0 1000.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-0-4","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dials 0.0.4","text":"offset() renamed kernel_offset() avoid name conflicts.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-003","dir":"Changelog","previous_headings":"","what":"dials 0.0.3","title":"dials 0.0.3","text":"CRAN release: 2019-10-01","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dials 0.0.3","text":"parameter objects now parameter functions. example, pre-configured object mtry now function, mtry(), arguments range trans. provides greater flexibility parameter creation, feel natural. deg_free() erroneously produced real values; integers now returned. Default ranges changed learn_rate() neighbors() changed. update.param_set() now takes multiple named arguments.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"other-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Other changes","title":"dials 0.0.3","text":"Two functions space-filling designs added: grid_max_entropy() grid_latin_hypercube(). data set added modeling ridership Chicago L trains.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"new-parameter-functions-0-0-3","dir":"Changelog","previous_headings":"","what":"New parameter functions:","title":"dials 0.0.3","text":"Parameters spline_degree(), over_ratio(), under_ratio(), freq_cut(), unique_cut(), num_breaks(), min_unique(), num_hash(), signed_hash(), sample_prop(), window_size(), min_dist(), degree_int() added.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-002","dir":"Changelog","previous_headings":"","what":"dials 0.0.2","title":"dials 0.0.2","text":"CRAN release: 2018-12-09 Parameter objects now contain code finalize values number helper functions certain data-specific parameters. force option can used avoid updating values. Parameter objects printed differently inside tibbles. regularization changed penalty models consistent change. batch_size threshold added. Added set parameters textrecipes package issue 16.","code":""},{"path":"https://dials.tidymodels.org/dev/news/index.html","id":"dials-001","dir":"Changelog","previous_headings":"","what":"dials 0.0.1","title":"dials 0.0.1","text":"CRAN release: 2018-08-13 First CRAN version","code":""}]
